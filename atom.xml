<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vedfolnir</title>
  <icon>https://www.gravatar.com/avatar/52fb66bdac74c922b9ce4ddd419e8656</icon>
  <subtitle>...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-16T13:24:34.134Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>C1oudust</name>
    <email>amerkiousy@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信浏览器video标签层级问题</title>
    <link href="http://yoursite.com/blog/%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8video%E6%A0%87%E7%AD%BE%E5%B1%82%E7%BA%A7%E9%97%AE%E9%A2%9820201113/"/>
    <id>http://yoursite.com/blog/微信浏览器video标签层级问题20201113/</id>
    <published>2020-11-12T16:00:00.000Z</published>
    <updated>2020-11-16T13:24:34.134Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>video</code>标签的视频播放后，<code>video</code>标签的层级就会变为最大，此时设置<code>z-index</code> 和 <code>opacity</code>均失效。</p><p>解决方法是在<code>video</code>标签里添加属性</p><ul><li><p>安卓：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x5-video-player-type="h5"</div><div class="line">webkit-playsinline="true"</div><div class="line">playsinline="true"</div></pre></td></tr></table></figure><p>注意：安卓下不要添加 <code>x5-playsinline</code> 属性，会导致其他属性全部失效。</p></li><li><p>iOS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">x5-playsinline</span> <span class="selector-tag">playsinline</span> <span class="selector-tag">webkit-playsinline</span></div></pre></td></tr></table></figure></li></ul><p>参考链接：</p><p><a href="https://www.cnblogs.com/wisewrong/p/10276947.html" target="_blank" rel="external">大事记 - 安卓微信浏览器 video 标签层级过高</a></p><p><a href="https://www.pianshen.com/article/57831927397/" target="_blank" rel="external">微信内置浏览器 video 标签自动全屏播放以及层级过高问题</a></p><p><a href="https://www.cnblogs.com/baiyygynui/p/6323565.html" target="_blank" rel="external">video 标签在微信浏览器的问题解决方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;code&gt;video&lt;/code&gt;标签的视频播放后，&lt;code&gt;video&lt;/code&gt;标签的层级就会变为最大，此时设置&lt;code&gt;z-index&lt;/code&gt; 和 &lt;code&gt;opacity&lt;/code&gt;均失效。&lt;/p&gt;
&lt;p&gt;解决方法是在&lt;code&gt;video&lt;/c
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/source/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>uniapp-qq开放数据使用</title>
    <link href="http://yoursite.com/blog/uniapp-qq%E5%BC%80%E6%94%BE%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A820201111/"/>
    <id>http://yoursite.com/blog/uniapp-qq开放数据使用20201111/</id>
    <published>2020-11-10T16:00:00.000Z</published>
    <updated>2020-11-16T13:08:12.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uniapp-qq-开放数据使用"><a href="#uniapp-qq-开放数据使用" class="headerlink" title="uniapp-qq 开放数据使用"></a>uniapp-qq 开放数据使用</h1><p>用途</p><ol><li><p>展示用户个人信息如头像等，类似 <code>getUserInfo()</code>。</p></li><li><p>展示针对用户好友对于某一产品或某一产品下的不同选项的选择。</p></li></ol><a id="more"></a><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><p><img src="http://doc.itwlw.com/server/../Public/Uploads/2020-08-26/5f45d73a9e76a.png" alt=""></p><h2 id="uniapp-中具体使用方式"><a href="#uniapp-中具体使用方式" class="headerlink" title="uniapp 中具体使用方式"></a>uniapp 中具体使用方式</h2><ul><li><p>创建一个组件并在要展示用户数据的页面引入，此处为 <code>FriendList.vue</code>。</p><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">&lt;view class=&quot;friend-content&quot; v-for=&quot;item of userList&quot;&gt;</div><div class="line">&lt;image class=&quot;image&quot; :src=&quot;item.avatarUrl&quot; mode=&quot;widthFix&quot;&gt;&lt;/image&gt;</div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view&gt;&#123;&#123; componentData.value &#125;&#125;&lt;/view&gt;</div><div class="line">&lt;view&gt;&#123;&#123; item.kvDataList[0].value &#125;&#125;&lt;/view&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">props: [&apos;userList&apos;, &apos;componentData&apos;],</div><div class="line">&#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>调用 <code>qq.setUserCloudStorage()</code>方法托管用户关系数据。</li></ul><p><strong>具体属性:</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>KVDataList</td><td>Array.<kvdata></kvdata></td><td>是</td><td>要修改的 KV 数据列表</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h6 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">qq.setUserCloudStorage(&#123;</div><div class="line">KVDataList: [</div><div class="line">&#123; <span class="attr">key</span>: self.lastChoiceId, <span class="attr">value</span>: <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString() &#125;,</div><div class="line">],</div><div class="line">success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'set UserCloudStorage success！'</span>);</div><div class="line">&#125;,</div><div class="line">fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line"><span class="built_in">console</span>.warn(<span class="string">'set UserCloudStorage failed！'</span>, res);</div><div class="line">&#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h6 id="托管数据的限制"><a href="#托管数据的限制" class="headerlink" title="托管数据的限制"></a>托管数据的限制</h6><ol><li>每个 openid 所标识的 QQ 用户在每个游戏上托管的数据不能超过 128 个 key-value 对。</li><li>上报的 key-value 列表当中每一项的 key+value 长度都不能超过 1K(1024)字节。</li><li>上报的 key-value 列表当中每一个 key 长度都不能超过 128 字节。</li></ol><ul><li><p>在想展示好友关系链的地方使用 open-data 标签</p><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">open-data</span></span></div><div class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"friendCloudStorage"</span></span></div><div class="line"><span class="tag"><span class="attr">generic:simple-component</span>=<span class="string">"friendlist"</span></span></div><div class="line"><span class="tag"><span class="attr">:keyList</span>=<span class="string">"[item.id]"</span></span></div><div class="line"><span class="tag"><span class="attr">:component-data</span>=<span class="string">"data"</span></span></div><div class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">value: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>open-data 标签用于展示 QQ 开放数据。</p><p><strong>具体属性：</strong></p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>type</td><td>String</td><td></td><td>开放数据类型</td><td></td></tr><tr><td>open-gid</td><td>String</td><td></td><td>当 type=”groupName” 时生效, 群 id</td><td></td></tr><tr><td>lang</td><td>String</td><td>en</td><td>当 type=”user*“ 时生效，以哪种语言展示 userInfo，有效值有：en, zh_CN, zh_TW</td><td></td></tr><tr><td>share-ticket</td><td>String</td><td>en</td><td>当 type=groupCloudStorage 时有效，群分享对应的 shareTicket</td><td>1.17.0</td></tr><tr><td>key-list</td><td>String</td><td>en</td><td>当 type=*CloudStorage 时有效，指定要拉取的 key 列表</td><td>1.17.0</td></tr><tr><td>component-data</td><td>String</td><td>en</td><td>当 type=*CloudStorage 时有效，从主域透传给开放数据域的数据，会自动注入到自定义开放数据域组件的 properties 中</td><td>1.17.0</td></tr><tr><td>generic:simple-component</td><td>String</td><td>en</td><td>当 type=*CloudStorage 时有效,指定使用哪个自定义开放数据域组件来渲染开放数据,具体说明见下方</td><td>1.17.0</td></tr><tr><td>binderror</td><td>String</td><td>en</td><td>当 type=*CloudStorage 时有效,开放数据请求或定向分享失败时触发，event.detail = {errMsg: “getGroupCloudStorage:fail no data”}</td><td>1.17.0</td></tr></tbody></table><p><strong>type 有效值：</strong></p><table><thead><tr><th>值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>groupName</td><td>拉取群名称,只有当前用户在此群内才能拉取到群名称</td><td></td></tr><tr><td>userNickName</td><td>用户昵称</td><td></td></tr><tr><td>userAvatarUrl</td><td>用户头像</td><td></td></tr><tr><td>userGender</td><td>用户性别</td><td></td></tr><tr><td>userCity</td><td>用户所在城市</td><td></td></tr><tr><td>userProvince</td><td>用户所在省份</td><td></td></tr><tr><td>userCountry</td><td>用户所在国家</td><td></td></tr><tr><td>userLanguage</td><td>用户的语言</td><td></td></tr><tr><td>userCloudStorage</td><td>获取当前用户的<code>应用数据</code></td><td>1.17.0</td></tr><tr><td>friendCloudStorage</td><td>获取当前用户也玩该小程序的好友的<code>应用数据</code></td><td>1.17.0</td></tr><tr><td>groupCloudStorage</td><td>获取当前用户在某个群中也玩该小程序的成员的<code>应用数据</code></td><td>1.17.0</td></tr></tbody></table><h5 id="关系链数据展示说明"><a href="#关系链数据展示说明" class="headerlink" title="关系链数据展示说明"></a>关系链数据展示说明</h5><p>当 type=*CloudStorage, 可通过 <code>generic:simple-component</code>属性指定<code>自定义开放数据域组件</code></p><p>指定的<code>自定义开放数据域组件</code>中会在<code>props</code>中自动注入以下属性</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>kvDataList</td><td>Array.<kvdata></kvdata></td><td>当<code>type=userCloudStorage</code>时</td></tr><tr><td>userList</td><td>Array.<userdata></userdata></td><td>当<code>type=friendCloudStorage</code> 或 <code>type=groupCloudStorage</code> 时</td></tr><tr><td>componentData</td><td>Object</td><td>从主域透传给开放数据域的数据</td></tr></tbody></table><p><code>KVData</code>数据结构说明</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>string</td><td>数据的 key</td></tr><tr><td>value</td><td>KVData</td><td>数据的 value</td></tr></tbody></table><p><code>UserData</code>数据结构说明</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>openid</td><td>string</td><td>用户的 openid</td></tr><tr><td>avatarUrl</td><td>string</td><td>用户的 QQ 头像 url</td></tr><tr><td>nickname</td><td>string</td><td>用户的 QQ 昵称</td></tr><tr><td>kvDataList</td><td>Array.<kvdata></kvdata></td><td>用户的应用数据</td></tr></tbody></table><p>用户的 <code>应用数据</code> 指的是用户的分数、段位等小程序业务特有的数据，通过调用 <code>qq.setUserCloudStorage()</code> 可以将当前用户的应用数据托管在 QQ 后台。只有被托管过数据的用户，才会被视为 <code>玩过</code> 该小程序的用户，才会出现在 <code>type=friendCloudStorage</code> 和 <code>type=groupCloudStorage</code> 的<code>&lt;open-data&gt;</code>组件中</p><h2 id="一些限制及处理方法"><a href="#一些限制及处理方法" class="headerlink" title="一些限制及处理方法"></a>一些限制及处理方法</h2><ol><li><p>自定义组件中无法对<code>userList</code>进行操作，无法将<code>userList</code>赋值给在<code>data</code>中的变量，无法使用<code>watch</code>监控<code>userList</code>使其存在后赋值给<code>data</code>里的变量，无法使用 data 中定义的变量。</p><ul><li><p>需要显示固定数量的用户数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;view v-for=&quot;item of userList.slice(0,3)&quot;&gt;  // 无法显示</div><div class="line">&lt;view v-for=&quot;(item, index) of userList&quot; v-if=&quot;index &lt; 4&quot;&gt; // 正常显示</div></pre></td></tr></table></figure></li></ul></li><li><p>自定义组件中无法使用<code>methods</code>中的方法（不识别 methods），无法使用外部导入的 js 中的方法（打包后找不到 js 文件）</p><ul><li><p>需要对用户数据进行排序：</p><p>在打包后的代码中使用官方文档中的原生排序方法 （<strong>参考文档 3</strong>）</p></li></ul></li><li><p>关于 componentData ，需要传递对象类型。</p><p>​ 示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">dataList: [</div><div class="line">&#123;</div><div class="line">id: <span class="string">'1'</span>,</div><div class="line">data: &#123;</div><div class="line">value: <span class="number">1</span>,</div><div class="line">&#125;,</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">id: <span class="string">'2'</span>,</div><div class="line">data: &#123;</div><div class="line">value: <span class="number">2</span>,</div><div class="line">&#125;,</div><div class="line">&#125;,</div><div class="line">];</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;view v-for=&quot;item of dataList&quot;&gt;</div><div class="line">&lt;open-data</div><div class="line">      type=&quot;friendCloudStorage&quot;</div><div class="line">      generic:simple-component=&quot;list&quot;</div><div class="line">      :keyList=&quot;[item.id]&quot;</div><div class="line">      :component-data=&quot;item.data&quot;</div><div class="line">    &gt;</div><div class="line">&lt;/open-data&gt;</div><div class="line">  &lt;/view&gt;</div></pre></td></tr></table></figure><p>结果：</p><p><img src="http://doc.itwlw.com/server/../Public/Uploads/2020-08-26/5f45de7431b41.jpg" alt=""></p></li><li><p>关于记录存放上限：</p><p>由于无法在自定义组件中对<code>userList</code>进行操作，从而无法根据产品去筛选其中的选项，因此采用一种妥协的处理方法——将单个选项的 id 作为 key，时间戳作为 value。缺点是最多只能存 128 条记录。因此当存储记录达到上限后会无法继续存用户数据。</p><ul><li>解决方法：在<code>storage</code>中添加数组 <code>keyList</code>同步云端数据的 key 进行更新，在<code>setUserCloudStorage</code>方法的回调里对<code>keyList</code>进行处理，弹出栈底的 key，这里的 key 同步云端最早添加的一条记录，调用<code>qq.removeUserCloudStorage()</code>方法删除云端数据。</li><li>关于排序的补充，需要在<code>setUserCloudStorage</code>方法的回调里对<code>keyList</code>进行处理，移动已存在的数据至栈顶。从而保证云端数据表时间戳更新后和本地<code>keyList</code>顺序保持同步。</li></ul></li><li><p>其他限制：</p><ul><li><p>组件所有的生命周期函数都不会被触发</p></li><li><p>无法绑定任何事件回调（所有事件绑定都会被过滤掉）</p></li><li><p>无法通过<code>createSelectorQuery</code>、<code>createIntersectionObserver</code> 接口获取<code>自定义开放数据域组件</code>的任何节点</p></li><li><p>仅支持使用<code>&lt;view&gt;</code>、<code>&lt;text&gt;</code>、<code>&lt;image&gt;</code>、<code>&lt;button&gt;</code> 组件,其他组件会被自动过滤掉</p></li><li><p>开放数据域组件内引用的任何组件，其<code>style</code>属性都会被置空</p></li><li><p>拥有独立的作用域，qml 文件引用的 qs 模块会重新生成新的实例</p></li></ul></li><li><p>调试工具中无法展示<code>open-data</code>中的数据，开发时需使用预览或真机调试。</p><p><img src="http://doc.itwlw.com/server/../Public/Uploads/2020-08-26/5f45d87eaee30.png" alt=""></p><p>预览模式在手机的调试窗口的 QML 中无法查看当前元素中的<code>key-list</code>值和<code>component-data</code> 值，需使用真机调试在 PC 的窗口中查看。</p></li></ol><h2 id="处理逻辑代码参考"><a href="#处理逻辑代码参考" class="headerlink" title="处理逻辑代码参考"></a>处理逻辑代码参考</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">qq.setUserCloudStorage(&#123;</div><div class="line">KVDataList: [</div><div class="line">&#123; <span class="attr">key</span>: self.lastChoiceId, <span class="attr">value</span>: <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString() &#125;,</div><div class="line">],</div><div class="line">success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'set UserCloudStorage success！'</span>);</div><div class="line"><span class="keyword">if</span> (uni.getStorageSync(<span class="string">'choiceIdList'</span>)) &#123;</div><div class="line">self.choiceIdList = <span class="built_in">JSON</span>.parse(uni.getStorageSync(<span class="string">'choiceIdList'</span>));</div><div class="line"><span class="comment">// 去重</span></div><div class="line"><span class="keyword">var</span> index = self.choiceIdList.indexOf(self.lastChoiceId);</div><div class="line"><span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</div><div class="line">self.choiceIdList.push(self.lastChoiceId.toString());</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">self.choiceIdList.splice(index, <span class="number">1</span>);</div><div class="line">self.choiceIdList.push(self.lastChoiceId.toString());</div><div class="line">&#125;</div><div class="line"><span class="comment">// self.choiceIdList = Array.from(new Set(self.choiceIdList));</span></div><div class="line"></div><div class="line">uni.setStorageSync(<span class="string">'choiceIdList'</span>, <span class="built_in">JSON</span>.stringify(self.choiceIdList));</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">temp.push(self.lastChoiceId.toString());</div><div class="line">self.choiceIdList = temp;</div><div class="line">uni.setStorageSync(<span class="string">'choiceIdList'</span>, <span class="built_in">JSON</span>.stringify(temp));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (self.choiceIdList.length &gt; <span class="number">100</span>) &#123;</div><div class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">key.push(self.choiceIdList.shift());</div><div class="line">qq.removeUserCloudStorage(key);</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(res);</div><div class="line">&#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>参考文档：</p><p><a href="https://q.qq.com/wiki/develop/miniprogram/component/open-ability/open-data.html" target="_blank" rel="external">1. 开放能力-open-data</a></p><p><a href="https://q.qq.com/wiki/develop/miniprogram/API/open_port/open-data.html" target="_blank" rel="external">2. 关系链数据</a></p><p><a href="https://q.qq.com/wiki/develop/miniprogram/frame/open_ability/open-data.html#自定义开放数据域组件说明" target="_blank" rel="external">3. 自定义开放数据域组件说明</a></p><p><a href="https://segmentfault.com/a/1190000015034592" target="_blank" rel="external">4. 微信小游戏 —— 关系链数据使用(排行榜的显示)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;uniapp-qq-开放数据使用&quot;&gt;&lt;a href=&quot;#uniapp-qq-开放数据使用&quot; class=&quot;headerlink&quot; title=&quot;uniapp-qq 开放数据使用&quot;&gt;&lt;/a&gt;uniapp-qq 开放数据使用&lt;/h1&gt;&lt;p&gt;用途&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;展示用户个人信息如头像等，类似 &lt;code&gt;getUserInfo()&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;展示针对用户好友对于某一产品或某一产品下的不同选项的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/source/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS 0.5px border最终解决方案</title>
    <link href="http://yoursite.com/blog/CSS0.5pxborder%E6%9C%80%E7%BB%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%8820201016/"/>
    <id>http://yoursite.com/blog/CSS0.5pxborder最终解决方案20201016/</id>
    <published>2020-10-15T16:00:00.000Z</published>
    <updated>2020-11-16T13:05:26.181Z</updated>
    
    <content type="html"><![CDATA[<p>总结 0.5px border 的实现方法。</p><a id="more"></a><h3 id="乞丐版本"><a href="#乞丐版本" class="headerlink" title="乞丐版本"></a><strong>乞丐版本</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.hr</span> &#123;</div><div class="line"><span class="attribute">border</span>: <span class="number">0.5px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>缺点非常多，几乎不能兼容，常见的浏览器都是真实显示 1px。</p><h3 id="逻辑可行、实际很惨的线性渐变-linear-gradient"><a href="#逻辑可行、实际很惨的线性渐变-linear-gradient" class="headerlink" title="逻辑可行、实际很惨的线性渐变 linear-gradient"></a>逻辑可行、实际很惨的<strong>线性渐变 linear-gradient</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.hr</span><span class="selector-class">.gradient</span> &#123;</div><div class="line"><span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(0deg, #fff, #000);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>缺点是明显发虚，不是真实的 0.5px 实线</p><h3 id="box-shadow方式"><a href="#box-shadow方式" class="headerlink" title="box-shadow方式"></a><strong>box-shadow</strong>方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.hr</span><span class="selector-class">.boxshadow</span> &#123;</div><div class="line"><span class="attribute">box-shadow</span>: <span class="number">00.5px</span>0<span class="number">#000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>缺点是各流览器都是虚的，也不是完美方案</p><h3 id="使用SVG"><a href="#使用SVG" class="headerlink" title="使用SVG"></a>使用<strong>SVG</strong></h3><p>完美的解决方案，还可以适配不同形状的图形。</p><p>原理是利用 SVG 的描边属性为 1 物理像素（物理像素最低也必须得有 1，不然什么也看不见了），是高清屏的 0.5px。</p><p>缺点是有些复杂，简单的直线不必上 SVG。</p><p>若用 SVG 时，部分场景也需要绝对定位和设置<code>pointer-events : none</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">"./halfLine.svg"</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="SVG-文件（halfLine-svg）"><a href="#SVG-文件（halfLine-svg）" class="headerlink" title="SVG 文件（halfLine.svg）"></a>SVG 文件（halfLine.svg）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"1px"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"100%"</span> <span class="attr">y2</span>=<span class="string">"0"</span> <span class="attr">stroke</span>=<span class="string">"#000"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="transform-scale-0-5"><a href="#transform-scale-0-5" class="headerlink" title="transform scale(0.5)"></a><strong>transform scale(0.5)</strong></h3><p>用伪元素画出 200%宽高的边，然后<code>transform scale(0.5)</code>缩小，然后用<code>pointer-events：none</code>去除点击/聚焦事件。</p><p>完美的解决方案，简单易用。</p><p>缺点是只能画直线和<code>border</code>，缺点是有实际文档流中的体积，且配合按钮写宽度不好计算及控制。</p><p>使用伪元素，将伪元素绝对定位且设置无事件，可以完美解决体积及不好控制的问题。代码如下：</p><p><img src="https://pic1.zhimg.com/80/v2-2918c955aadf1dbe61769a051afe12d8_720w.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.half-1px-line</span>,</span></div><div class="line"><span class="css"><span class="selector-class">.half-1px-border</span> &#123;</span></div><div class="line"><span class="undefined">position: relative;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.half-1px-line</span><span class="selector-pseudo">::after</span>,</span></div><div class="line"><span class="css"><span class="selector-class">.half-1px-border</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">content: '';</span></div><div class="line"><span class="undefined">position: absolute;</span></div><div class="line"><span class="undefined">width: 200%;</span></div><div class="line"><span class="undefined">height: 200%;</span></div><div class="line"><span class="undefined">top: 0;</span></div><div class="line"><span class="undefined">left: 0;</span></div><div class="line"><span class="undefined">transform-origin: 0 0;</span></div><div class="line"><span class="undefined">border-width: 1px;</span></div><div class="line"><span class="undefined">border-style: solid;</span></div><div class="line"><span class="css"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.5</span>, 0<span class="selector-class">.5</span>);</span></div><div class="line"><span class="undefined">border-radius: 1px;</span></div><div class="line"><span class="undefined">box-sizing: border-box;</span></div><div class="line"><span class="undefined">pointer-events: none;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.half-1px-line</span><span class="selector-pseudo">::after</span> &#123;</span></div><div class="line"><span class="undefined">border-width: 0;</span></div><div class="line"><span class="undefined">border-bottom-width: 1px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"half-1px-line"</span>&gt;</span>单线0.5px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"half-1px-border"</span>&gt;</span>四周0.5px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://link.zhihu.com/?target=https%3A//juejin.im/post/5ab65f40f265da2384408a95" target="_blank" rel="external">怎么画一条 0.5px 的边（更新） - 掘金 juejin.im</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结 0.5px border 的实现方法。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/source/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>算法：十进制转二十七进制</title>
    <link href="http://yoursite.com/blog/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E8%BF%9B%E5%88%B620200420/"/>
    <id>http://yoursite.com/blog/算法：十进制转二十七进制20200420/</id>
    <published>2020-04-19T16:00:00.000Z</published>
    <updated>2020-04-20T10:46:12.872Z</updated>
    
    <content type="html"><![CDATA[<p>面试遇到的一道题目，十进制转二十七进制,0 用数字 9 表示，剩下用 A - Z 表示 。</p><a id="more"></a><p>我的解决方法(C#):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private static String[] NUM = &#123;&quot;9&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;I&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;M&quot;,&quot;N&quot;,&quot;O&quot;,&quot;P&quot;,&quot;Q&quot;,&quot;R&quot;,&quot;S&quot;,&quot;T&quot;,&quot;U&quot;,&quot;V&quot;,&quot;W&quot;,&quot;X&quot;,&quot;Y&quot;,&quot;Z&quot;&#125;;</div><div class="line"></div><div class="line">public static string Convert(uint value)</div><div class="line">&#123;</div><div class="line">    if (value==0)</div><div class="line">    &#123;</div><div class="line">        return &quot;&quot;;</div><div class="line">    &#125;</div><div class="line">    return Convert(value/27)+NUM[value%27];</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static string Convert27(uint value)</div><div class="line">&#123;</div><div class="line">    if (value==0)</div><div class="line">    &#123;</div><div class="line">        return NUM[0];</div><div class="line">    &#125;</div><div class="line">    return Convert(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>朋友的解决方法(java)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">conversion</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    String res = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (num &gt;= <span class="number">27</span>) &#123;</div><div class="line">        res += Integer.toString(num/<span class="number">27</span>);</div><div class="line">        <span class="keyword">int</span> rem = num % <span class="number">27</span>;</div><div class="line">        <span class="keyword">if</span> (rem == <span class="number">0</span>) &#123; <span class="keyword">return</span> res; &#125;</div><div class="line">        <span class="keyword">if</span> (rem &lt; <span class="number">10</span>) &#123;</div><div class="line">            res += Integer.toString(rem);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res += (<span class="keyword">char</span>)(rem-<span class="number">10</span>+<span class="number">65</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (num &lt; <span class="number">10</span>) &#123;</div><div class="line">            res += Integer.toString(num);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res += (<span class="keyword">char</span>)(num-<span class="number">10</span>+<span class="number">97</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试遇到的一道题目，十进制转二十七进制,0 用数字 9 表示，剩下用 A - Z 表示 。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/source/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue之动态渲染的input框获取焦点问题</title>
    <link href="http://yoursite.com/blog/Vue%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E7%9A%84input%E6%A1%86%E8%8E%B7%E5%8F%96%E7%84%A6%E7%82%B9%E9%97%AE%E9%A2%9820200415/"/>
    <id>http://yoursite.com/blog/Vue之动态渲染的input框获取焦点问题20200415/</id>
    <published>2020-04-14T16:00:00.000Z</published>
    <updated>2020-04-20T16:30:19.023Z</updated>
    
    <content type="html"><![CDATA[<p>场景：个人信息页面，点击资料显示输入框以更改信息，这里用 v-show 显示和隐藏 input 元素，所以需要让使用 v-show 或者 v-if 动态控制的 input 输入框在显示时自动获取焦点。</p><a id="more"></a><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><ol><li><p>在元素标签加上 <code>autofocus=&quot;autofocus&quot;</code></p><p>无效</p><p>原因：autofocus 属性是在当页面加载时自动获得焦点。</p></li><li><p>使用 vue 指令 <code>v-focus</code></p><p>无效</p></li><li><p>使用 ref 传递 input 元素，手动添加 focus 事件， <code>this.$refs.input.focus()</code>;</p><p>无效，并报错。错误原因，点击是元素还未被渲染，因此无法获取到元素本身，自然无法找到 focus 事件</p></li><li><p>在尝试 3 的基础上使用 <code>$nextTick</code>的回调函数</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.$refs.input.focus()</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>问题解决。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 vue 中，并不是每次数据改变都会触发更新 DOM，而是将这些操作都缓存在一个队列，在一个事件循环结束之后，刷新队列，统一执行 DOM 更新操作。</p><p>通常情况下，我们不需要关心这个问题，而如果想在 DOM 状态更新后做点什么，则需要用到 nextTick。</p><p>在 vue 生命周期的 created()钩子函数进行的 DOM 操作要放在 Vue.nextTick()的回调函数中，因为 created()钩子函数执行的时候 DOM 并未进行任何渲染，而此时进行 DOM 操作是徒劳的，所以此处一定要将 DOM 操作的 JS 代码放进 Vue.nextTick()的回调函数中。</p><p>参考：<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97" target="_blank" rel="external">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景：个人信息页面，点击资料显示输入框以更改信息，这里用 v-show 显示和隐藏 input 元素，所以需要让使用 v-show 或者 v-if 动态控制的 input 输入框在显示时自动获取焦点。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/source/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>关于解决移动端Retina屏幕1px边框问题的方法</title>
    <link href="http://yoursite.com/blog/%E5%85%B3%E4%BA%8E%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AFRetina%E5%B1%8F%E5%B9%951px%E8%BE%B9%E6%A1%86%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%9520200403/"/>
    <id>http://yoursite.com/blog/关于解决移动端Retina屏幕1px边框问题的方法20200403/</id>
    <published>2020-04-02T16:00:00.000Z</published>
    <updated>2020-04-20T10:44:34.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="造成边框变粗的原因"><a href="#造成边框变粗的原因" class="headerlink" title="造成边框变粗的原因"></a>造成边框变粗的原因</h2><p>在 CSS 中的 1px 并不等于移动设备的 1px。这是由于不同的手机有不同的像素密度，在浏览器的 window 对象中有一个 devicePixelRatio 属性，可以反应 CSS 中像素与设备的像素比。</p><blockquote><p>devicePixelRatio 的官方定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素</p></blockquote><a id="more"></a><h2 id="解决边框变粗的六种方法"><a href="#解决边框变粗的六种方法" class="headerlink" title="解决边框变粗的六种方法"></a>解决边框变粗的六种方法</h2><h3 id="0-5px-边框"><a href="#0-5px-边框" class="headerlink" title="0.5px 边框"></a>0.5px 边框</h3><p>在 2014 年的 WWDC，“设计响应的 web 体验”一讲中，Ted O’Connor 讲到关于“retinahairlines”的处理方法：</p><p>通过 JavaScript 检测浏览器能否处理 0.5px 的边框，如果可以，给 HTML 标签元素添加一个类。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bbb</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.hairlinds</span> <span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">border-width</span>: <span class="number">0.5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>)&#123;</div><div class="line">    <span class="keyword">var</span> testElem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    testElem.style.border = <span class="string">'0.5px solid transparent'</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(testElem);</div><div class="line">    <span class="keyword">if</span>(testElem.offsetHeight == <span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'html'</span>).classList.add(<span class="string">'hairlines'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.body.removeChild(testElem);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用-border-image-或者-background-image"><a href="#使用-border-image-或者-background-image" class="headerlink" title="使用 border-image 或者 background-image"></a>使用 border-image 或者 background-image</h3><p>使用一张 2px 的图片，根据需求留空 1px，剩余 1px 为边框颜色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">-moz-border-image</span>: <span class="built_in">url</span>(/i/border.png) <span class="number">30</span> <span class="number">30</span> stretch; <span class="comment">/* Old Firefox */</span></div><div class="line">  <span class="attribute">-webkit-border-image</span>: <span class="built_in">url</span>(border.png) <span class="number">30</span> <span class="number">30</span> stretch; <span class="comment">/* Safari 5 */</span></div><div class="line">  <span class="attribute">-o-border-image</span>: <span class="built_in">url</span>(border.png) <span class="number">30</span> <span class="number">30</span> stretch; <span class="comment">/* Opera */</span></div><div class="line">  <span class="attribute">border-image</span>: <span class="built_in">url</span>(border.png) <span class="number">30</span> <span class="number">30</span> stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.background-image-1px</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../img/line.png) repeat-x left bottom;</div><div class="line">  <span class="attribute">-webkit-background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>缺点：</p><ol><li>修改颜色麻烦，需要替换图片</li><li>圆角需要特殊处理，某些设备上边缘会模糊</li></ol><h3 id="使用-box-shadow-模拟边框"><a href="#使用-box-shadow-模拟边框" class="headerlink" title="使用 box-shadow 模拟边框"></a>使用 box-shadow 模拟边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box-shadow-1px</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> -<span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="number">#ddd</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>优点：代码少，兼容性好。</p><p>缺点：边框有阴影，颜色变浅。</p><h3 id="伪元素-transform"><a href="#伪元素-transform" class="headerlink" title="伪元素+transform"></a>伪元素+transform</h3><p>构建 1 个伪元素, border 为 1px, 再以 transform 缩放到 50%。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 设计稿是750,采用1：100的比例,font-size为100*(100vw/750) */</span></div><div class="line"><span class="selector-class">.border-1px</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>) &#123;</div><div class="line">  <span class="selector-class">.border-1px</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">' '</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span>;</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scaleY</span>(0.5);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.5);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>优点：可以满足所有场景，兼容好，且修改灵活。<br>缺点：对于已使用伪类的元素要多层嵌套。</p><h3 id="用-JS-计算-rem-基准值和-viewport-缩放值"><a href="#用-JS-计算-rem-基准值和-viewport-缩放值" class="headerlink" title="用 JS 计算 rem 基准值和 viewport 缩放值"></a>用 JS 计算 rem 基准值和 viewport 缩放值</h3><p>用 JS 根据屏幕尺寸和 dpr 精确地设置不同屏幕所应有的 rem 基准值和 initial-scale 缩放值，这个 JS 方案已经在完美解决了 1px 细线问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 设计稿是750,采用1：100的比例,font-size为100 * (docEl.clientWidth * dpr / 750) */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> dpr, rem, scale;</div><div class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</div><div class="line"><span class="keyword">var</span> fontEl = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</div><div class="line"><span class="keyword">var</span> metaEl = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>);</div><div class="line">dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>;</div><div class="line">rem = <span class="number">100</span> * ((docEl.clientWidth * dpr) / <span class="number">750</span>);</div><div class="line">scale = <span class="number">1</span> / dpr;</div><div class="line"><span class="comment">// 设置viewport，进行缩放，达到高清效果</span></div><div class="line">metaEl.setAttribute(</div><div class="line">  <span class="string">'content'</span>,</div><div class="line">  <span class="string">'width='</span> +</div><div class="line">    dpr * docEl.clientWidth +</div><div class="line">    <span class="string">',initial-scale='</span> +</div><div class="line">    scale +</div><div class="line">    <span class="string">',maximum-scale='</span> +</div><div class="line">    scale +</div><div class="line">    <span class="string">', minimum-scale='</span> +</div><div class="line">    scale +</div><div class="line">    <span class="string">',user-scalable=no'</span></div><div class="line">);</div><div class="line"><span class="comment">// 设置data-dpr属性，留作的css hack之用，解决图片模糊问题和1px细线问题</span></div><div class="line">docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</div><div class="line"><span class="comment">// 动态写入样式</span></div><div class="line">docEl.firstElementChild.appendChild(fontEl);</div><div class="line">fontEl.innerHTML = <span class="string">'html&#123;font-size:'</span> + rem + <span class="string">'px!important;&#125;'</span>;</div></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/superlizhao/p/8729190.html" target="_blank" rel="external">https://www.cnblogs.com/superlizhao/p/8729190.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;造成边框变粗的原因&quot;&gt;&lt;a href=&quot;#造成边框变粗的原因&quot; class=&quot;headerlink&quot; title=&quot;造成边框变粗的原因&quot;&gt;&lt;/a&gt;造成边框变粗的原因&lt;/h2&gt;&lt;p&gt;在 CSS 中的 1px 并不等于移动设备的 1px。这是由于不同的手机有不同的像素密度，在浏览器的 window 对象中有一个 devicePixelRatio 属性，可以反应 CSS 中像素与设备的像素比。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;devicePixelRatio 的官方定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习中的一些感悟</title>
    <link href="http://yoursite.com/blog/Vue%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F20200401/"/>
    <id>http://yoursite.com/blog/Vue学习中的一些感悟20200401/</id>
    <published>2020-03-31T16:00:00.000Z</published>
    <updated>2020-11-16T13:06:04.870Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 Vue 进行实际开发中，遇到了不少问题，在成功解决后，我觉得有必要把遇到的问题记录下来。一是以后遇到类似的问题时，方便查阅，二是能够激励自己继续学习。</p><a id="more"></a><h2 id="关于-e-target-和-e-currentTarget"><a href="#关于-e-target-和-e-currentTarget" class="headerlink" title="关于 e.target 和 e.currentTarget"></a>关于 e.target 和 e.currentTarget</h2><p>场景：给 v-for 循环渲染出的含有子元素的元素添加了 click 事件，并且动态绑定了 id 属性，想要在点击该元素时，输出对应的 id 值。</p><p>在这里需要使用 <code>e.currentTarget.id</code> 而不是 <code>e.target.id</code>。</p><p>解释如下：</p><p>当点击事件发生在绑定事件对象的子元素上时，<code>e.currentTarget</code>.会始终返回绑定事件的对象，而 <code>e.target</code> 会返回绑定点击事件的元素的子元素。</p><p>不管你点击的是元素本身或者元素里面任何子元素，<code>currentTarget</code> 获取到的对象都为绑定事件的元素。当使用 <code>target</code> 时，如果你点击到绑定事件的元素则返回该元素，如果点击到它之中的某个子级元素则返回它之中的某个元素。</p><p>上文可能有点啰嗦，总结一下，<code>target</code> 会变，点到谁身上就返回谁，<code>currentTarget</code> 不会变，返回事件源对象。</p><h2 id="返回上一页的解决方式"><a href="#返回上一页的解决方式" class="headerlink" title="返回上一页的解决方式"></a>返回上一页的解决方式</h2><h3 id="使用-go-和-back"><a href="#使用-go-和-back" class="headerlink" title="使用 go()和 back()"></a>使用 go()和 back()</h3><p>history.go(-1)：后退同时刷新页面</p><p>history.go(1)：前进</p><p>使用 go，原页面表单中的内容会丢失。</p><p>history.back()：后退</p><p>history.back(0)：刷新</p><p>history.back(1)：前进</p><p>使用 back，原页表表单中的内容会保留</p><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>使用了 vue-router 的话，可以用 this.\$router.go(-1) 返回上一页。</p><p>这里需要注意的是：history.go(-1)是回到浏览器上一页，但是由于 Vue 应用是单页应用，浏览器的访问历史未必和 Vue 的浏览历史相同。</p><h2 id="watch-中的-deep-和-immediate-参数"><a href="#watch-中的-deep-和-immediate-参数" class="headerlink" title="watch 中的 deep 和 immediate 参数"></a>watch 中的 deep 和 immediate 参数</h2><p>这两个选项在<a href="https://cn.vuejs.org/v2/api/#watch" target="_blank" rel="external">官方文档</a>中一笔带过。</p><p>个人感觉有需要的时候还是很好用的，比如使用 deep 监听对象中属性的变化。</p><h2 id="vue-router-项目的-404-页面"><a href="#vue-router-项目的-404-页面" class="headerlink" title="vue-router 项目的 404 页面"></a>vue-router 项目的 404 页面</h2><p>这个只需要在路由配置中加入 path 值为*的选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  path: <span class="string">'*'</span>,</div><div class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./notFindPage'</span>)</div><div class="line">&#125;,</div></pre></td></tr></table></figure><h2 id="vue-router-跳转页面记忆页面的滚动位置"><a href="#vue-router-跳转页面记忆页面的滚动位置" class="headerlink" title="vue-router 跳转页面记忆页面的滚动位置"></a>vue-router 跳转页面记忆页面的滚动位置</h2><p>开始做的时候用了非常麻烦的方法，后来去看文档，发现只需要一个设置而已。</p><p>首先需要开启 vue-router 的<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#html5-history-%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">history 模式</a></p><p>然后具体设置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  mode: <span class="string">'history'</span>,</div><div class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</div><div class="line">    <span class="keyword">if</span> (savedPosition) &#123; <span class="comment">//如果savedPosition存在，滚动条会自动跳到记录的值的地方</span></div><div class="line">      <span class="keyword">return</span> savedPosition</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;<span class="comment">//savedPosition也是一个记录x轴和y轴位置的对象</span></div><div class="line">    &#125;</div><div class="line">    &#125;，</div><div class="line">  routes: [...]</div><div class="line"> &#125;)</div></pre></td></tr></table></figure><p><a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html" target="_blank" rel="external">官方文档里</a>关于配置也讲的很详细。</p><h2 id="总结与吐槽"><a href="#总结与吐槽" class="headerlink" title="总结与吐槽"></a>总结与吐槽</h2><p>以上就是我这段时间学习 Vue 的一些感悟，虽然不是很深入的东西，但新手学习东西不免会遇到坑，只有跨过这些坑才能更好地掌握一门技术。</p><p>其实最好的解决方法就是去查看官方文档，文档里讲的比任何地方都全，这段时间看文档，受益良多。</p><p>网上的教程质量确实参差不齐，就拿 csdn 举例，之前搜教程的时候看到<a href="https://blog.csdn.net/xingyu_qie/article/details/78831045" target="_blank" rel="external">这么一篇文章</a>，作者大佬确实言辞比较激烈，个人感觉话糙理不糙，这段时间学下来，感觉解决问题最好的论坛就是<a href="https://segmentfault.com/" target="_blank" rel="external">segmentfault</a> 和<a href="https://stackoverflow.com/" target="_blank" rel="external">stack overflow.</a>了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 Vue 进行实际开发中，遇到了不少问题，在成功解决后，我觉得有必要把遇到的问题记录下来。一是以后遇到类似的问题时，方便查阅，二是能够激励自己继续学习。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/source/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue之better-scroll导致click事件失效问题</title>
    <link href="http://yoursite.com/blog/Vue%E4%B9%8Bbetter-scroll%E5%AF%BC%E8%87%B4click%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%9820200324/"/>
    <id>http://yoursite.com/blog/Vue之better-scroll导致click事件失效问题20200324/</id>
    <published>2020-03-23T16:00:00.000Z</published>
    <updated>2020-04-06T16:14:53.002Z</updated>
    
    <content type="html"><![CDATA[<p>在 vue 中用了 better-scroll 插件之后，在浏览器模拟的手机端可以触发 click 事件，但在真机上测试的时候，click 事件失效。</p><a id="more"></a><p>在<a href="https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/options.html" target="_blank" rel="external">官方文档选项页面</a>中查到原因：</p><blockquote><p><strong>click</strong>：better-scroll 默认会阻止浏览器的原生 click 事件。当设置为 true，better-scroll 会派发一个 click 事件，我们会给派发的 event 参数加一个私有属性 _constructed，值为 true。<br><strong>tap</strong>：因为 better-scroll 会阻止原生的 click 事件，我们可以设置 tap 为 true，它会在区域被点击的时候派发一个 tap 事件，你可以像监听原生事件那样去监听它，如 element.addEventListener(‘tap’, doSomething, false);。如果 tap 设置为字符串, 那么这个字符串就作为自定义事件名称。如 tap: ‘myCustomTapEvent’。</p></blockquote><p>因此需要在初始化 better-scroll 的时候加入参数，设置成这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.scroll = <span class="keyword">new</span> Bscroll(<span class="string">'.wrapper'</span>, &#123; <span class="attr">click</span>: <span class="literal">true</span>, <span class="attr">tap</span>: <span class="literal">true</span> &#125;);</div></pre></td></tr></table></figure><p>问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 vue 中用了 better-scroll 插件之后，在浏览器模拟的手机端可以触发 click 事件，但在真机上测试的时候，click 事件失效。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/source/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue之使用proxytable解决跨域问题</title>
    <link href="http://yoursite.com/blog/Vue%E4%B9%8B%E4%BD%BF%E7%94%A8proxytable%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%9820200323/"/>
    <id>http://yoursite.com/blog/Vue之使用proxytable解决跨域问题20200323/</id>
    <published>2020-03-22T16:00:00.000Z</published>
    <updated>2020-04-04T15:48:34.340Z</updated>
    
    <content type="html"><![CDATA[<p>现代的 web 开发一般都是前后端分离，前后端使用 rest api 进行交互，分离使得前后端服务器一般都不在一起，这导致了跨域问题，本文说明在 vue-cli 中解决这一问题。</p><a id="more"></a><h2 id="关于跨域简述"><a href="#关于跨域简述" class="headerlink" title="关于跨域简述"></a>关于跨域简述</h2><p>一般来说，浏览器默认是不允许跨域发送请求的，这里面涉及到安全问题，<code>XSS</code>、<code>CSRF</code>等攻击手段都是恶意脚本的跨站访问，所以一般在服务端没有特殊说明的情况下，浏览器都是禁用<code>CORS</code>的。</p><p>浏览器如何判断是否是跨域访问呢？这里面就要讲到同源策略。同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则基于互联网的 web 访问安全会受到巨大威胁。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p><p>关于同源策略可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">MDN 对浏览器的同源策略的说明</a>。</p><p>对于跨域问题的详细描述参考 segmentfault 上的 <a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="external">这篇文章</a>。</p><p>简单的来说：协议、IP、端口三者都相同，则为同源。不是同源的脚本不能操作其他源下面的对象。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>同源策略保障了互联网的安全访问，但是却对于前后端分离的应用带来了挑战。幸运的是，现在的解决方案也很多，比如 script 标签、jsonp、后端设置 cors、Nginx 代理转发等等。</p><p>在 Vue 中，提供了使用 webpack 的 DevServer 作为开发环境下跨域问题的解决方法，支持所有<a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="external">webpack-dev-server 的选项</a>。</p><p>vue-cli 从 3.0 之后隐藏了很多配置文件，因此在我使用的 vue-cli4.2.3 中，参考官方文档，要想配置 proxy，首先需要在根目录下新建 <code>vue.config.js</code> 文件，然后加入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  devServer: &#123;</div><div class="line">    proxy: &#123;</div><div class="line">      <span class="string">'/api'</span>: &#123;</div><div class="line">        target: <span class="string">'http://127.0.0.1:4000'</span>,</div><div class="line">        changeOrigin: <span class="literal">true</span>,</div><div class="line">        ws: <span class="literal">true</span>,</div><div class="line">        pathRewrite: &#123;</div><div class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>devServer.proxy 可以是一个指向开发环境 API 服务器的字符串：</p><p>如此在前端所有发往/api 的请求都会转发至后端服务 <a href="http://127.0.0.1:4000/api" target="_blank" rel="external">http://127.0.0.1:4000/api</a> ,问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现代的 web 开发一般都是前后端分离，前后端使用 rest api 进行交互，分离使得前后端服务器一般都不在一起，这导致了跨域问题，本文说明在 vue-cli 中解决这一问题。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/source/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS之隐藏元素的方法和区别</title>
    <link href="http://yoursite.com/blog/CSS%E4%B9%8B%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB20200321/"/>
    <id>http://yoursite.com/blog/CSS之隐藏元素的方法和区别20200321/</id>
    <published>2020-03-20T16:00:00.000Z</published>
    <updated>2020-03-31T09:24:19.148Z</updated>
    
    <content type="html"><![CDATA[<p><strong>隐藏一个元素有三种方法。分别是<code>display:none</code>, <code>visibility:hidden</code> 和 <code>opacity:0</code></strong></p><a id="more"></a><h2 id="display-none"><a href="#display-none" class="headerlink" title="display:none"></a><strong>display:none</strong></h2><ol><li>DOM 结构：浏览器不会渲染该元素并且不会在页面上占据空间；</li><li>事件监听： 无法进行 DOM 事件监听；</li><li>继承：不会被子元素继承，因为子类也不会被渲染；</li><li>transition: transition 不支持<code>display</code>；</li><li>性能：动态改变此属性时会引起重排，性能较差(<code>css3</code> 的动画效果在<code>display:none</code> 的时候不耗费性能。)</li></ol><h2 id="visibility-hidden"><a href="#visibility-hidden" class="headerlink" title="visibility:hidden"></a><strong>visibility:hidden</strong></h2><ol><li>DOM 结构： 元素被隐藏但会被渲染，所以会占据空间；</li><li>事件监听： 无法进行 DOM 事件监听；</li><li>继承：会被子元素继承，并且子元素可以使用 <code>visibility:visible</code> 取消隐藏；</li><li>transition：visibility 会被立即显示，隐藏时会延时；</li><li>性能： 动态改变此属性时会引起重绘，性能较高。</li></ol><h2 id="opacity-0"><a href="#opacity-0" class="headerlink" title="opacity:0"></a><strong>opacity:0</strong></h2><ol><li>DOM 结构： 元素被隐藏但占据空间，因为只是改变透明度；</li><li>事件监听： 可以进行 DOM 事件监听；</li><li>继承： 会被子元素继承且子元素不能使用 <code>opacity:1</code> 取消隐藏；</li><li>transition： opacity 可以延时显示和隐藏；</li><li>性能：提升为合成层，不会触发重绘，性能较高。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;隐藏一个元素有三种方法。分别是&lt;code&gt;display:none&lt;/code&gt;, &lt;code&gt;visibility:hidden&lt;/code&gt; 和 &lt;code&gt;opacity:0&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/source/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS之BFC的理解</title>
    <link href="http://yoursite.com/blog/CSS%E4%B9%8BBFC%E7%9A%84%E7%90%86%E8%A7%A320200320/"/>
    <id>http://yoursite.com/blog/CSS之BFC的理解20200320/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2021-01-10T17:36:10.724Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">img{text-align: center; margin: 0 auto;}</style><h2 id="什么是-BFC"><a href="#什么是-BFC" class="headerlink" title="什么是 BFC"></a>什么是 BFC</h2><p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。</p><blockquote><p>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p></blockquote><p>而 BFC（Block Formatting Contexts）即块级格式化上下文，是一个块级元素的渲染显示规则，属于元素定位方案中普通流的一种。可以把 BFC 理解为一个封闭的容器，容器里面的子元素不会影响到外面的元素，反之也如此。</p><a id="more"></a><h3 id="元素定位方案"><a href="#元素定位方案" class="headerlink" title="元素定位方案"></a>元素定位方案</h3><p>定位方案是控制元素的布局，常见方案有三种:</p><ul><li><p>普通流 (normal flow)</p><p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</p></li><li><p>浮动 (float)</p><p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</p></li><li><p>绝对定位 (absolute positioning)</p><p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定</p></li></ul><h2 id="触发-BFC"><a href="#触发-BFC" class="headerlink" title="触发 BFC"></a>触发 BFC</h2><p>BFC 的布局规则如下：</p><ul><li><p>内部的盒子会在垂直方向，一个个地放置</p></li><li><p>BFC 是页面上的一个隔离的独立容器</p></li><li><p>属于同一个 BFC 的 两个相邻 Box 的 上下 margin 会发生重叠</p></li><li><p>计算 BFC 的高度时，浮动元素也参与计算</p></li><li><p>每个元素的左边，与包含的盒子的左边相接触，即使存在浮动也是如此</p></li><li><p>BFC 的区域不会与 float 重叠</p></li></ul><p>只要元素满足下面任一条件即可触发 BFC 特性：</p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h2 id="BFC-特性及应用"><a href="#BFC-特性及应用" class="headerlink" title="BFC 特性及应用"></a>BFC 特性及应用</h2><h3 id="阻止外边距折叠-margin-collapse"><a href="#阻止外边距折叠-margin-collapse" class="headerlink" title="阻止外边距折叠 (margin collapse)"></a><strong>阻止外边距折叠 (margin collapse)</strong></h3><blockquote><p><strong>MDN 关于外边距折叠的定义</strong>：<br>当块级元素 (block) 的上外边距 (margin-top) 和下外边距 (margin-bottom) 同时都有设定时只会只会保留最大边距，这种行为称为边界折叠（margin collapsing），有时也翻译为外边距重叠。</p></blockquote><p>比如以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.block</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background-color</span>: lightblue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span> &#123;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bottom</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>两个垂直排列的元素，实际在页面上的距离是 30px，而不是 20px + 30px = 50px</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">关于外边距折叠的详细参考</a></p><p>根据 BFC 布局规则的第三条，之所以会发生折叠是因为它们同属于 body 这个根元素。</p><p>那么只需要把两个 div 元素放在不同的 BFC 容器里就可以避免折叠：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>同时，<code>container</code> 类必须加上 <code>overflow: hidden</code> 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  .container &#123;</div><div class="line">    <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a><strong>清除浮动</strong></h3><p>正常情况下，浮动的元素会脱离文档流。</p><p>以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.block</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果如下：</p><p><img src="//cdn.c1oudust.cn/20200320/1.jpg" alt="未清除浮动"></p><p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 <code>2px</code> 的边距高度。如果使触发容器的 <code>BFC</code>，那么容器将会包裹着浮动元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="//cdn.c1oudust.cn/20200320/2.jpg" alt="清除浮动"></p><h3 id="阻止元素被浮动元素覆盖"><a href="#阻止元素被浮动元素覆盖" class="headerlink" title="阻止元素被浮动元素覆盖"></a><strong>阻止元素被浮动元素覆盖</strong></h3><p>以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">aside</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#555555</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">main</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">background-color</span>: lightblue;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果如下：</p><p><img src="//cdn.c1oudust.cn/20200320/3.jpg" alt="浮动元素覆盖"></p><p>这时候第二个元素有部分被浮动元素所覆盖。</p><p>之所以是这样，是因为规则 5： <code>每个元素的左边，与包含的盒子的左边相接触，即使存在浮动也是如此</code>。</p><p>要想改变效果，使其互不干扰，就得利用规则 6 ：BFC 的区域不会与 float 重叠，在第二个元素的样式中加入 <code>overflow: hidden</code>，就会变成：</p><p><img src="//cdn.c1oudust.cn/20200320/4.jpg" alt="浮动元素覆盖"></p>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
img{text-align: center; margin: 0 auto;}
&lt;/style&gt;

&lt;h2 id=&quot;什么是-BFC&quot;&gt;&lt;a href=&quot;#什么是-BFC&quot; class=&quot;headerlink&quot; title=&quot;什么是 BFC&quot;&gt;&lt;/a&gt;什么是 BFC&lt;/h2&gt;&lt;p&gt;Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而 BFC（Block Formatting Contexts）即块级格式化上下文，是一个块级元素的渲染显示规则，属于元素定位方案中普通流的一种。可以把 BFC 理解为一个封闭的容器，容器里面的子元素不会影响到外面的元素，反之也如此。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://yoursite.com/source/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之阻止冒泡和取消默认事件</title>
    <link href="http://yoursite.com/blog/JavaScript%E4%B9%8B%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1%E5%92%8C%E5%8F%96%E6%B6%88%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B620200318/"/>
    <id>http://yoursite.com/blog/JavaScript之阻止冒泡和取消默认事件20200318/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-03-31T11:17:56.168Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡和捕获是 JS 中事件的两种传递方式。在   冒泡   中，内部元素的事件会先被触发，然后再触发外部元素。</p><p>在   捕获   中，外部元素的事件会先被触发，然后才会触发内部元素的事件。</p><a id="more"></a><h2 id="冒泡和捕获"><a href="#冒泡和捕获" class="headerlink" title="冒泡和捕获"></a>冒泡和捕获</h2><p>参考以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"level1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"level2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"level3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  $(<span class="string">'#level1'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'1'</span>);&#125;);</div><div class="line">  $(<span class="string">'#level2'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'2'</span>);&#125;);</div><div class="line">  $(<span class="string">'#level3'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'3'</span>);&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>在这个例子中，id 为 level3 的元素在 level2 元素内部，而 level2 元素又在 level1 的元素内部，因此点击了 level3 的元素，这个点击事件也会传递给 level2 和 level1 的元素，这时会输出 <code>3 2 1</code>。这就是冒泡。</p><p>而为了触发 捕获，则需要将 addEventListener 的第三个参数设置为 true(默认是 false)，这时就会输出 <code>1 2 3</code>。</p><h2 id="阻止事件传递"><a href="#阻止事件传递" class="headerlink" title="阻止事件传递"></a>阻止事件传递</h2><p>为了在点击 level3 元素时，不发生 level1 和 level2 元素的点击事件，就需要对事件传递进行阻止。</p><p>w3c 的方法是 <code>e.stopPropagation()</code>，也是目前最常使用的方法(兼容性为除了 IE9 以下,Edge12 以下的所有浏览器)，IE 则是使用 <code>e.cancelBubble = true</code>(IE6 7 8)</p><p><code>stopPropagation</code> 是事件对象(Event)的一个方法，作用是阻止目标元素的冒泡事件，但不会阻止默认行为。</p><h2 id="取消默认事件"><a href="#取消默认事件" class="headerlink" title="取消默认事件"></a>取消默认事件</h2><p>w3c 的方法是 <code>e.preventDefault()</code> ，IE 则是使用 <code>e.returnValue = false</code>;</p><p><code>preventDefault</code> 它是事件对象(Event)的一个方法，作用是取消一个目标元素的默认行为。既然是说默认行为，当然是元素必须有默认行为才能被取消。如链接 <code>&lt;a&gt;</code>，提交按钮 <code>&lt;input type=”submit”&gt;</code>等。当 Event 对象的 cancelable 为 false 时，表示没有默认行为，这时即使有默认行为，调用 preventDefault 也是不会起作用的。</p><p>比如，用来禁止选择网页上的文字：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'selectstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">e.preventDefault();</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h2><p><code>return false</code> 等效于同时调用 <code>e.preventDefault()</code>和 <code>e.stopPropagation()</code></p><p><code>return false</code> 除了阻止默认行为之外，还会阻止事件冒泡。</p><p>在 jQuery 的源码中，有如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (ret === <span class="literal">false</span>) &#123;</div><div class="line">  event.preventDefault();</div><div class="line">  event.stopPropagation();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;冒泡和捕获是 JS 中事件的两种传递方式。在   冒泡   中，内部元素的事件会先被触发，然后再触发外部元素。&lt;/p&gt;
&lt;p&gt;在   捕获   中，外部元素的事件会先被触发，然后才会触发内部元素的事件。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/source/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之闭包的理解</title>
    <link href="http://yoursite.com/blog/JavaScript%E4%B9%8B%E9%97%AD%E5%8C%85%E7%90%86%E8%A7%A320200316/"/>
    <id>http://yoursite.com/blog/JavaScript之闭包理解20200316/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-04-11T07:52:47.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是闭包（Closure）"><a href="#什么是闭包（Closure）" class="headerlink" title="什么是闭包（Closure）"></a>什么是闭包（Closure）</h2><a id="more"></a><p>在《JavaScript高级程序设计》里，有以下定义：</p><blockquote><p>闭包指有权访问另一个函数作用域中变量的函数。</p></blockquote><p>首先来看下列代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> local = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        local++;</div><div class="line">        <span class="built_in">console</span>.log( local );</div><div class="line">    &#125;</div><div class="line"><span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func = foo();</div><div class="line">func();</div></pre></td></tr></table></figure><p>在这个例子中，函数 <code>bar()</code> 的词法作用域能够访问 <code>foo()</code> 的内部作用域。然后我们将 <code>bar()</code> 函数本身当作一个值类型进行传递。<br>在 <code>foo()</code>执行后，其返回值（也就是内部的 <code>bar()</code> 函数）赋值给变量 <code>func</code> 并调用 <code>func()</code>，实际上只是通过不同的标识符引用调用了内部的函数 <code>bar()</code>。<br>显然<code>bar()</code>会被正常执行。更进一步地说，它是在自己定义的词法作用域以外的地方执行。</p><p>在 JavaScript 中，因为有垃圾回收器的存在，因此在一个函数被执行后，如果检测到他的内容在之后不会再被使用，那么引擎会考虑对其进行回收。(对于 JavaScript 的垃圾回收，可以参考<a href="https://segmentfault.com/a/1190000015641168" target="_blank" rel="external">这篇文章</a>)</p><p>然而在这个例子中，<code>foo()</code>被执行后，事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域？是 <code>bar()</code> 本身在使用。</p><p>拜 <code>bar()</code> 所声明的位置所赐，它拥有涵盖 <code>foo()</code> 内部作用域的闭包，使得该作用域能够一直存活，以供 <code>bar()</code> 在之后任何时间进行引用。</p><p>换句话说，<code>bar()</code> 持有对该作用域的引用，而这个引用就叫作闭包。</p><p>因此，在几微秒之后变量 <code>func</code> 被实际调用，不出意料它可以访问定义时的词法作用域，因此它也可以如预期般访问局部变量 <code>local</code> 。</p><p>这几行代码可能过于复杂，我们可以把它精简成这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> local = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( local );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这三行代码中，<code>bar</code> 可以访问到 <code>local</code> 变量，这就是一个闭包。诚然如此，但我们通常会把这三行代码放在一个函数里。为什么呢？这就涉及到闭包的作用了。</p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>闭包通常用来间接访问一个变量。也就是说，可以隐藏一个变量使它不能被直接访问。</p><p>要想达到这个效果，就可以把这个变量放在一个作用域内，然后单独创建一个对他进行控制的函数，这样我们就只能通过这个函数去访问它。</p><p>这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。</p><p>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用<br>域的引用，无论在何处执行这个函数都会使用闭包。</p><h2 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h2><p>无论何时何地，如果将函数（访问它们各自的词法作用域）当作第一级的值类型并到处传递，就会产生闭包。</p><p>在<code>定时器</code>、<code>事件监听器</code>、<code>Ajax 请求</code>、<code>跨窗口通信</code>、<code>Web Workers</code> 或者任何其他的异步或者同步任务中，只要使用了回调函数，实际上也是在使用闭包。</p><p>比如下列代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;, i * <span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>正常情况下，我们对这段代码行为的预期是依次输出数字 1~5，每秒一次输出一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次 6。</p><p>事实上，当定时器运行时即使每个迭代中执行的是 <code>setTimeout(.., 0)</code>，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。</p><p>但是根据作用域的工作原理，尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 <code>i</code>。也就是说，所有函数都共享一个 <code>i</code> 的引用。</p><p>而这个循环的终止条件是 <code>i &gt; 5</code>。条件首次成立时 <code>i</code> 的值是 6。因此，输出显示的是循环结束时 <code>i</code> 的最终值。</p><p>那么怎么解决呢？</p><p>我们可以使用 <code>IIFE</code> (Immediately Invoked Function Expression)即立即调用函数来对 <code>i</code> 创建一个单独的作用域，并使用另一个变量 <code>j</code> 在每次迭代中存放 <code>i</code> 的值，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> j = i;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(j);</div><div class="line">    &#125;, j * <span class="number">1000</span>);</div><div class="line">  &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样代码就能按照预期输出 1~5 了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是闭包（Closure）&quot;&gt;&lt;a href=&quot;#什么是闭包（Closure）&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包（Closure）&quot;&gt;&lt;/a&gt;什么是闭包（Closure）&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/source/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/source/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>markdownlint语法警告类型</title>
    <link href="http://yoursite.com/blog/markdownlint%E8%AF%AD%E6%B3%95%E8%AD%A6%E5%91%8A%E7%B1%BB%E5%9E%8B20200315/"/>
    <id>http://yoursite.com/blog/markdownlint语法警告类型20200315/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2021-01-10T17:36:06.711Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//cdn.c1oudust.cn/Markdownlint_warning.jpg" alt="头图"></p><p>最近在 vscode 中安装了 markdownlint 插件来检查 markdown 语法的准确性，发现很多不准确的地方。于是参考官方文档，了解警告内容后，一一改正。</p><a id="more"></a><p>下面就来列举一下 markdownlint 的警告类型。</p><p>本文主要参考 markdownlint 的 <a href="https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md#md002---first-heading-should-be-a-top-level-heading" target="_blank" rel="external">rules 文档</a>，对每一个规则都进行了说明，指明了一些规则中可以设置的参数，便于用户设置相应的规则。</p><h3 id="MD001-Heading-levels-should-only-increment-by-one-level-at-a-time"><a href="#MD001-Heading-levels-should-only-increment-by-one-level-at-a-time" class="headerlink" title="MD001 - Heading levels should only increment by one level at a time"></a>MD001 - Heading levels should only increment by one level at a time</h3><p>标题级数每次只能依次扩大 1, 不能隔级创建标题（从 1 级到 6 级的顺序）</p><blockquote><p># Heading 1</p><p>### Heading 3<br>跳过了二级标题</p></blockquote><h3 id="MD002-First-heading-should-be-a-top-level-heading"><a href="#MD002-First-heading-should-be-a-top-level-heading" class="headerlink" title="MD002 - First heading should be a top level heading"></a><del>MD002 - First heading should be a top level heading</del></h3><p>文档的第一个标题必须是最高级的标题（标题等级 1 级到 6 级逐渐降低）</p><p>参数：<br>“level”：指定最高级标题的级数，默认是 1</p><p>注意：MD002 已弃用，默认情况下已禁用。MD041 提供了改进的实现。</p><h3 id="MD003-Heading-style"><a href="#MD003-Heading-style" class="headerlink" title="MD003 - Heading style"></a>MD003 - Heading style</h3><p>整篇文档要采用一致的标题格式</p><p>参数：<br>“style”：字符串，指定文档标题的格式，有(“consistent”, “atx”, “atx_closed”, “setext”, “setext_with_atx”, “setext_with_atx_closed”)五种，默认是”consistent”，也就是整篇文档一致</p><p>标题格式必须统一，一般不能混用，但”setext_with_atx”, “setext_with_atx_closed”格式可以在”setext”格式二级标题后接着使用”atx”或”atx_closed”格式的标题</p><h3 id="MD004-Unordered-list-style"><a href="#MD004-Unordered-list-style" class="headerlink" title="MD004 - Unordered list style"></a>MD004 - Unordered list style</h3><p>整篇文档定义无序列表的格式要一致</p><p>错误：</p><blockquote><p>* Item 1</p><p>+ Item 2</p><p>- Item 3</p></blockquote><p>正确：</p><blockquote><p>* Item 1</p><p>* Item 2</p><p>* Item 3</p></blockquote><h3 id="MD005-Inconsistent-indentation-for-list-items-at-the-same-level"><a href="#MD005-Inconsistent-indentation-for-list-items-at-the-same-level" class="headerlink" title="MD005 - Inconsistent indentation for list items at the same level"></a>MD005 - Inconsistent indentation for list items at the same level</h3><p>同一级的列表缩进必须一致<br>在有序列表中，前面的数字序号可以左对齐，也可以右对齐</p><h3 id="MD006-Consider-starting-bulleted-lists-at-the-beginning-of-the-line"><a href="#MD006-Consider-starting-bulleted-lists-at-the-beginning-of-the-line" class="headerlink" title="MD006 - Consider starting bulleted lists at the beginning of the line"></a><del>MD006 - Consider starting bulleted lists at the beginning of the line</del></h3><p>1 级列表不能缩进</p><h3 id="MD007-Unordered-list-indentation"><a href="#MD007-Unordered-list-indentation" class="headerlink" title="MD007 - Unordered list indentation"></a>MD007 - Unordered list indentation</h3><p>无序列表嵌套缩进时默认采用两个空格</p><h3 id="MD009-Trailing-spaces"><a href="#MD009-Trailing-spaces" class="headerlink" title="MD009 - Trailing spaces"></a>MD009 - Trailing spaces</h3><p>行尾最多可以添加两个空格，超过会给出警告，两个空格正好可以用于换行</p><p>参数：<br>“br_spaces”：指定在行尾可以添加的空格数目，空格数目建议大于等于 2，如果小于 2，会默认为 0，也就是不允许任何行尾的空格<br>“list_item_empty_lines”：字符串，指定在列表中是否(true or false)用默认的空格数缩进空行，有的解释器会要求列表中的空行要缩进</p><h3 id="MD010-Hard-tabs"><a href="#MD010-Hard-tabs" class="headerlink" title="MD010 - Hard tabs"></a>MD010 - Hard tabs</h3><p>不能使用 tab 键缩进，要使用空格</p><p>参数：<br>“code_blocks”：指定本条规则在代码块里是否(true or false)生效</p><h3 id="MD011-Reversed-link-syntax"><a href="#MD011-Reversed-link-syntax" class="headerlink" title="MD011 - Reversed link syntax"></a>MD011 - Reversed link syntax</h3><p>检查内联形式的链接的创建方式是否错误，中括号和圆括号是否用对</p><h3 id="MD012-Multiple-consecutive-blank-lines"><a href="#MD012-Multiple-consecutive-blank-lines" class="headerlink" title="MD012 - Multiple consecutive blank lines"></a>MD012 - Multiple consecutive blank lines</h3><p>文档中不能有连续的空行，在代码块中此规则不会生效</p><p>参数：<br>“maximum”：指定文档中可以连续的最多空行数，默认值是 1</p><h3 id="MD013-Line-length"><a href="#MD013-Line-length" class="headerlink" title="MD013 - Line length"></a>MD013 - Line length</h3><p>默认行的最大长度是 80，此规则对代码块、表格、标题也生效</p><p>参数：<br>“line_length”：指定行的最大长度，默认是 80<br>“heading_line_length”：指定标题行的最大长度，默认是 80<br>“code_blocks”：指定规则是否(true or false)对代码块生效，默认 true<br>“tables”：指定规则是否(true or false)对表格生效，默认 true<br>“hesdings”：指定规则是否(true or false)对标题生效，默认 true</p><h3 id="MD014-Dollar-signs-used-before-commands-without-showing-output"><a href="#MD014-Dollar-signs-used-before-commands-without-showing-output" class="headerlink" title="MD014 - Dollar signs used before commands without showing output"></a>MD014 - Dollar signs used before commands without showing output</h3><p>在代码块中，终端命令前不需要有美元符号($)<br>如果代码块中既有终端命令，也有命令的输出，则终端命令前可以有美元符号($)，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ls</div><div class="line">foo bar</div><div class="line"><span class="meta">$</span> cat foo</div><div class="line">hello world</div></pre></td></tr></table></figure><h3 id="MD018-No-space-after-hash-on-atx-style-heading"><a href="#MD018-No-space-after-hash-on-atx-style-heading" class="headerlink" title="MD018 - No space after hash on atx style heading"></a>MD018 - No space after hash on atx style heading</h3><p>在”atx”格式的标题中，#号和文字间需用一个空格隔开,否则不会生效</p><h3 id="MD019-Multiple-spaces-after-hash-on-atx-style-heading"><a href="#MD019-Multiple-spaces-after-hash-on-atx-style-heading" class="headerlink" title="MD019 - Multiple spaces after hash on atx style heading"></a>MD019 - Multiple spaces after hash on atx style heading</h3><p>在”atx”格式的标题中，#号和文字间只能用一个空格隔开，不能有多余的空格</p><h3 id="MD020-No-space-inside-hashes-on-closed-atx-style-heading"><a href="#MD020-No-space-inside-hashes-on-closed-atx-style-heading" class="headerlink" title="MD020 - No space inside hashes on closed atx style heading"></a>MD020 - No space inside hashes on closed atx style heading</h3><p>在”closed_atx”格式的标题中，文字和前后的#号之间需用一个空格隔开</p><h3 id="MD021-Multiple-spaces-inside-hashes-on-closed-atx-style-heading"><a href="#MD021-Multiple-spaces-inside-hashes-on-closed-atx-style-heading" class="headerlink" title="MD021 - Multiple spaces inside hashes on closed atx style heading"></a>MD021 - Multiple spaces inside hashes on closed atx style heading</h3><p>在”closed_atx”格式的标题中，文字和前后的#号之间只能用一个空格隔开，不能有多余的空格</p><h3 id="MD022-Headings-should-be-surrounded-by-blank-lines"><a href="#MD022-Headings-should-be-surrounded-by-blank-lines" class="headerlink" title="MD022 - Headings should be surrounded by blank lines"></a>MD022 - Headings should be surrounded by blank lines</h3><p>标题行的上下行必须都是空行</p><p>参数：<br>“lines_above”：指定标题行上方的空行数，默认为 1，可以设为更大或 0<br>“lines_below”：指定标题行下方的空行数，默认为 1，可以设为更大或 0</p><p>注意当此处的空行设为比 1 大的数时，规则 MD012 的设置也要改</p><h3 id="MD023-Headings-must-start-at-the-beginning-of-the-line"><a href="#MD023-Headings-must-start-at-the-beginning-of-the-line" class="headerlink" title="MD023 - Headings must start at the beginning of the line"></a>MD023 - Headings must start at the beginning of the line</h3><p>标题行不能缩进</p><h3 id="MD024-Multiple-headings-with-the-same-content"><a href="#MD024-Multiple-headings-with-the-same-content" class="headerlink" title="MD024 - Multiple headings with the same content"></a>MD024 - Multiple headings with the same content</h3><p>文档不能有内容重复的标题</p><p>参数：<br>“siblings_only”：默认为 false，设为 true 时，不同标题下的子标题内容可以重复</p><h3 id="MD025-Multiple-top-level-headings-in-the-same-document"><a href="#MD025-Multiple-top-level-headings-in-the-same-document" class="headerlink" title="MD025 - Multiple top level headings in the same document"></a>MD025 - Multiple top level headings in the same document</h3><p>同一文档只能有一个最高级的标题，默认是只能有一个 1 级标题</p><p>参数：<br>“level”：指定文档最高级的标题，默认是 1<br>“front_matter_title”：字符串，指定在文档开头处的 front matter 中的标题，这个标题将作为整篇文档的最高级标题，如果文档中再次出现最高级标题，将会给出警告，另外，如果不想在 front matter 中指定标题，就把本参数的值设置为””</p><h3 id="MD026-Trailing-punctuation-in-heading"><a href="#MD026-Trailing-punctuation-in-heading" class="headerlink" title="MD026 - Trailing punctuation in heading"></a>MD026 - Trailing punctuation in heading</h3><p>标题行末尾不能有以下标点符号：<code>&quot;.,;:!?&quot;</code></p><p>参数：<br>“punctuation”：字符串，指定标题行尾不能有的标点符号，默认是”.,;:!?”</p><p>此规则默认的是英文的标点符号，中文标点符号不在规则之内</p><h3 id="MD027-Multiple-spaces-after-blockquote-symbol"><a href="#MD027-Multiple-spaces-after-blockquote-symbol" class="headerlink" title="MD027 - Multiple spaces after blockquote symbol"></a>MD027 - Multiple spaces after blockquote symbol</h3><p>创建引用区块时，右尖括号 <code>&gt;</code> 和文字之间有且只能有一个空格</p><h3 id="MD028-Blank-line-inside-blockquote"><a href="#MD028-Blank-line-inside-blockquote" class="headerlink" title="MD028 - Blank line inside blockquote"></a>MD028 - Blank line inside blockquote</h3><p>两个引用区块间不能仅用一个空行隔开或者同一引用区块中不能有空行，如果一行中没有内容，则这一行要用 <code>&gt;</code> 开头</p><h3 id="MD029-Ordered-list-item-prefix"><a href="#MD029-Ordered-list-item-prefix" class="headerlink" title="MD029 - Ordered list item prefix"></a>MD029 - Ordered list item prefix</h3><p>有序列表的前缀序号格式必须只用 1 或者从 1 开始的加 1 递增数字(“one_or_ordered”)</p><p>参数：<br>“style”：字符串，指定前缀序号的格式，(“one”,”ordered”,”one_or_ordered”,”zero”)，分别表示只用 1 做前缀，用从 1 开始的加 1 递增数字做前缀，只用 1 或者从 1 开始的加 1 递增数字做前缀，只用 0 做前缀，默认值是”one_or_ordered”</p><p>本条规则支持在前缀序号中补 0，以实现对齐，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">08.  one</div><div class="line">09.  two</div><div class="line">10.  three</div><div class="line">...</div></pre></td></tr></table></figure><h3 id="MD030-Spaces-after-list-markers"><a href="#MD030-Spaces-after-list-markers" class="headerlink" title="MD030 - Spaces after list markers"></a>MD030 - Spaces after list markers</h3><p>列表（有序、无序）的前缀符号和文字之间用 1 个空格隔开<br>在列表嵌套或者同一列表项中有多个段落时，无序列表缩进两个空格，有序列表缩进 3 个空格</p><p>参数：<br>“ul_single”,”ol_single”,”ul_multi”,”ol_multi”：分别规定无序列表单个段落，有序列表单个段落，无序列表多个段落，有序列表多个段落的前缀符号和文字之间的空格数，默认是 1</p><h3 id="MD031-Fenced-code-blocks-should-be-surrounded-by-blank-lines"><a href="#MD031-Fenced-code-blocks-should-be-surrounded-by-blank-lines" class="headerlink" title="MD031 - Fenced code blocks should be surrounded by blank lines"></a>MD031 - Fenced code blocks should be surrounded by blank lines</h3><p>单独的代码块前后需要用空行隔开（除非是在文档开头或末尾），否则有些解释器不会解释为代码块</p><h3 id="MD032-Lists-should-be-surrounded-by-blank-lines"><a href="#MD032-Lists-should-be-surrounded-by-blank-lines" class="headerlink" title="MD032 - Lists should be surrounded by blank lines"></a>MD032 - Lists should be surrounded by blank lines</h3><p>列表（有序、无序）前后需要用空行隔开，否则有些解释器不会解释为列表<br>列表的缩进必须一致，否则会警告</p><h3 id="MD033-Inline-HTML"><a href="#MD033-Inline-HTML" class="headerlink" title="MD033 - Inline HTML"></a>MD033 - Inline HTML</h3><p>文档中不允许使用 HTML 语句</p><p>参数：<br>“allowed_elements”：自定义允许的元素，是一个字符串数组，默认是空(empty)</p><h3 id="MD034-Bare-URL-used"><a href="#MD034-Bare-URL-used" class="headerlink" title="MD034 - Bare URL used"></a>MD034 - Bare URL used</h3><p>单纯的链接地址需要用尖括号 <code>&lt;&gt;</code> 包裹，否则有些解释器不会解释为链接</p><h3 id="MD035-Horizontal-rule-style"><a href="#MD035-Horizontal-rule-style" class="headerlink" title="MD035 - Horizontal rule style"></a>MD035 - Horizontal rule style</h3><p>创建水平线时整篇文档要统一(consistent)，要和文档中第一次创建水平线使用的符号一致</p><p>参数：<br>“style”：字符串，指定创建水平线的方式，值有：(“consistent”,”***“,”—“,”___“)，默认是”consistent”</p><h3 id="MD036-Emphasis-used-instead-of-a-heading"><a href="#MD036-Emphasis-used-instead-of-a-heading" class="headerlink" title="MD036 - Emphasis used instead of a heading"></a>MD036 - Emphasis used instead of a heading</h3><p>不能用强调代替标题</p><p>参数：<br>“punctuation”：字符串，指定用于结尾的标点符号，以此符号结尾的强调不会被视为以强调代替标题，默认值是”.,;:!?”</p><p>此规则会检查只包含强调的单行段落，如果这种段落不是以指定的标点符号结尾，则会被视为以强调代替标题，会给出警告</p><h3 id="MD037-Spaces-inside-emphasis-markers"><a href="#MD037-Spaces-inside-emphasis-markers" class="headerlink" title="MD037 - Spaces inside emphasis markers"></a>MD037 - Spaces inside emphasis markers</h3><p>用于创建强调的符号和强调的的文字之间不能有空格</p><h3 id="MD038-Spaces-inside-code-span-elements"><a href="#MD038-Spaces-inside-code-span-elements" class="headerlink" title="MD038 - Spaces inside code span elements"></a>MD038 - Spaces inside code span elements</h3><p>当用单反引号创建代码段的时候，单反引号和它们之间的代码不能有空格<br>如果要把单反引号嵌入到代码段的首尾，创建代码段的单反引号和嵌入的单反引号间要有一个空格隔开</p><h3 id="MD039-Spaces-inside-link-text"><a href="#MD039-Spaces-inside-link-text" class="headerlink" title="MD039 - Spaces inside link text"></a>MD039 - Spaces inside link text</h3><p>链接名和包围它的中括号之间不能有空格，但链接名中间可以有空格，如：</p><blockquote><p>[百 度](<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a> “百 度”)</p></blockquote><h3 id="MD040-Fenced-code-blocks-should-have-a-language-specified"><a href="#MD040-Fenced-code-blocks-should-have-a-language-specified" class="headerlink" title="MD040 - Fenced code blocks should have a language specified"></a>MD040 - Fenced code blocks should have a language specified</h3><p>单独的代码块（此处是指上下用三个反引号包围的代码块）应该指定代码块的编程语言，这一点有助于解释器对代码进行代码高亮</p><h3 id="MD041-First-line-in-file-should-be-a-top-level-heading"><a href="#MD041-First-line-in-file-should-be-a-top-level-heading" class="headerlink" title="MD041 - First line in file should be a top level heading"></a>MD041 - First line in file should be a top level heading</h3><p>文档的第一个非空行应该是文档最高级的标题，默认是 1 级标题</p><p>参数：<br>“level”：指定文档最高级的标题，默认是 1<br>“front_matter_title”：字符串，指定在文档开头处的 front matter 中的标题，这个标题将作为整篇文档的最高级标题，另外，如果不想在 front matter 中指定标题，就把本参数的值设置为””</p><h3 id="MD042-No-empty-links"><a href="#MD042-No-empty-links" class="headerlink" title="MD042 - No empty links"></a>MD042 - No empty links</h3><p>链接的地址不能为空</p><h3 id="MD043-Required-heading-structure"><a href="#MD043-Required-heading-structure" class="headerlink" title="MD043 - Required heading structure"></a>MD043 - Required heading structure</h3><p>要求标题遵循一定的结构，默认是没有规定的结构(“null”)</p><p>参数：<br>“headings”：字符串数组，指定标题需要遵循的结构，默认是”null”，可以自行指定结构，如；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"# head"</span>, <span class="string">"## item"</span>, <span class="string">"### detail"</span>, <span class="string">"*"</span>]</div></pre></td></tr></table></figure><p>星号(*)表示对应的标题是可选的，没有强制要求，本条具体可以参照 MD043</p><h3 id="MD044-Proper-names-should-have-the-correct-capitalization"><a href="#MD044-Proper-names-should-have-the-correct-capitalization" class="headerlink" title="MD044 - Proper names should have the correct capitalization"></a>MD044 - Proper names should have the correct capitalization</h3><p>指定一些名称，会检查它是否有正确的大写</p><p>参数：<br>“names”：字符串数组，指定要检查需要大写的名称，默认是空(“null”)<br>“code_blocks”：指定本规则是否(true or false)对代码块生效，默认是 true<br>一些经常使用的名称可以使用本规则防止其拼写错误，比如 JavaScript 中字母 J 和 S 需要大写，就可以写到参数”names”中，防止写错</p><h3 id="MD045-Images-should-have-alternate-text-alt-text"><a href="#MD045-Images-should-have-alternate-text-alt-text" class="headerlink" title="MD045 - Images should have alternate text (alt text)"></a>MD045 - Images should have alternate text (alt text)</h3><p>图片链接必须包含描述文本（alt text）</p><h3 id="MD046-Code-block-style"><a href="#MD046-Code-block-style" class="headerlink" title="MD046 - Code block style"></a>MD046 - Code block style</h3><p>整篇文档采用一致的代码格式</p><p>参数：<br>“style”: 字符串，指定代码块定义格式，有（”consistent”,”fenced”,”indented”）三种，分别代表：文档上下文一致，使用三个反引号隔开，使用缩进，默认是上下文一致</p><h3 id="MD047-Files-should-end-with-a-single-newline-character"><a href="#MD047-Files-should-end-with-a-single-newline-character" class="headerlink" title="MD047 - Files should end with a single newline character"></a>MD047 - Files should end with a single newline character</h3><p>文档需用一个空行结尾</p><h3 id="MD048-Code-fence-style"><a href="#MD048-Code-fence-style" class="headerlink" title="MD048 - Code fence style"></a>MD048 - Code fence style</h3><p>代码块围栏的样式必须匹配<br>配置的列表样式可以是要使用的特定符号（回刻度、波浪线），也可以要求在文档中保持使用情况一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;//cdn.c1oudust.cn/Markdownlint_warning.jpg&quot; alt=&quot;头图&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在 vscode 中安装了 markdownlint 插件来检查 markdown 语法的准确性，发现很多不准确的地方。于是参考官方文档，了解警告内容后，一一改正。&lt;/p&gt;
    
    </summary>
    
      <category term="软件" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Markdown规范" scheme="http://yoursite.com/source/tags/Markdown%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>烈火燃尽后的生存与死亡</title>
    <link href="http://yoursite.com/blog/%E7%83%88%E7%81%AB%E7%87%83%E5%B0%BD%E5%90%8E%E7%9A%84%E7%94%9F%E5%AD%98%E4%B8%8E%E6%AD%BB%E4%BA%A120190805/"/>
    <id>http://yoursite.com/blog/烈火燃尽后的生存与死亡20190805/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2021-01-10T17:36:13.202Z</updated>
    
    <content type="html"><![CDATA[<p><div align="center"><br><img src="//cdn.c1oudust.cn/20190805/TheBravest.jpg" alt=""><br><a id="more"></a></div></p><p>那些为了国家，为了民族，为了大义牺牲的人，他们行为对其本人究竟有多少意义呢。看完《烈火英雄》，我不禁对这个世界产生了些许疑问。我想象中的美好世界，每个人都能幸福生活的世界，是不是不可能存在呢。</p><p>电影把重点放在了火灾发生时的情况，对灾难发生和结束的描写很少。纵观影片，观众的大部分印象就是满屏幕的火焰和消防员咬着牙坚持对抗火焰的表情。电影使用大量爆炸，火焰燃烧的镜头以让观众切身感受到火灾现场的压迫感，而这点似乎造成了我的某种“审美疲劳”。电影中大量出现的词语“流淌火”也仿佛魔咒一般，即使看完电影回到家中，也在我脑海中很长一段时间无法散去。</p><p>消防员救火这个题材，个人认为是非常好的，然而影片的重心并不在消防员齐心协力救火，而是主角江和徐的个人英雄主义剧情。上面说到影片大部分镜头都聚焦在火和爆炸上，剩下的就是市民的反应和江、马、徐三个消防战士身上。</p><p>电影对主角江立伟的塑造并不是很到位。主角开始因为自己不经意的疏忽造成了一名消防员的牺牲，自此这朵阴云久久飘浮在他的生活中。不仅被革了职，连儿子也因为父亲的过失遭到了非语。这里的剧情很奇怪，儿子同学的父亲从何处知道主角就是那个造成消防员牺牲的人，又为何要告诉一个三观正在形成的孩子呢？不得而知。想必这是编剧为主角之后救火的英勇表现所做的铺垫吧，然而这个铺垫的意义却不是很明朗。主角是因为对造成手下消防员牺牲的愧疚才去做敢死队队员，还是对自身有一种英雄主义的想法，还是二者都有呢？这里拍的最好的片段，个人认为应该是关阀门前江问马要烟的那一段，可以说是人物塑造中不多的闪光点之一了。</p><p>救火过程中还出现了一位快要退休的消防员郑智，对于他牺牲的描写可以说是比较无厘头的，也许是编剧为了在主角牺牲之前，为调节观众情绪点的一记饭前甜点？</p><p>另一名主角徐小斌的刻画在我看来是优于主角江立伟的。一个普通的消防员，对于一个看似简单实则困难重重的任务，付出了生命。关于河里的垃圾堵住了抽水管道这点，实在是满满的讽刺。这在我看来就是典型的描写小人物手法，无论是下水的片段还是牺牲之后恋人的表现，都极其具有感情表现力。</p><p>既然编剧能写出一个人转十几个小时的阀门，那为什么不能写出生存与牺牲的对比结局呢？徐小斌的牺牲是剧情的升华，而江立伟的牺牲却如鲠在喉。电影通过大量篇幅描写的主角江立伟的牺牲所起到影响观众情绪的效果，远不如相比较短的徐小斌的片段。</p><p>悲剧需要赋予其意义， 否则就是单纯的哗众取宠，如同《战狼2》通过雇佣兵军队残忍的杀戮来突显主角的英雄行为一样。影片结尾对于群众为消防员遗体哀悼的片段，对于影片的情感升华实际上毫无帮助，观众只能体会到浓浓的悲伤，然而整个影片的氛围却是比较壮烈的，可歌可泣的。</p><p><div align="center"><br><img src="//cdn.c1oudust.cn/20190805/Chernobyl.jpeg" alt=""></div></p><p>我联想到另一个同样是真实事件改编的电影 —— 《切尔诺贝利》。两部作品有着类似的叙事手法——灾难中不同小人物的插叙描写，包括了身处灾难第一线的人和阵线后的普通群众。</p><p>在看完《切尔诺贝利》后，我的第一感受是对人类在自我毁灭中求生欲望的震撼、对战线后贡献头脑的物理学家的敬畏和当权者视人命如蝼蚁保全自身隐瞒事实的悲哀，它讲的是灾难背后的人性。我觉得这是一个观众看完它后应有的感受。而当我看完《烈火英雄》时，却对这个世界，产生了恻隐之心，甚至产生了怀疑。《烈火英雄》通过人群涌入地铁，涌入船，涌入医院的场景，来描写出群众的恐慌，以突显出灾难之大，从而侧面反映消防员的奉献精神之伟大。而在我眼里这几段描写实际上意义并不大。如果能对码头负责人的言论，对爆炸的原因深入剖析，展开领导隐瞒真相，推卸责任，群众在灾难面前不择手段，那么会更加有深度和内涵，而不仅仅成为一部标准的煽情商业片。然而这些在电影中只是轻描淡写一笔带过。</p><p>《烈火英雄》确实很燃，但仅仅燃是不够的。本片可以说是陈国辉导演的评价最好的电影，但无奈导员水平还是有限。所以才会过早的立下一眼便知的flag。比如江立伟对儿子说：“等这次回去，我天天陪你上学”。这和战争片角色说“打完这仗就回老家结婚”如出一辙，想必是十有八九回不去了。另一个反应导演水平的就是电影中的配乐。电影中的燃点，泪点大多是靠配乐来烘托的，其次就是电影中过分使用的慢镜头，就不展开说了。</p><p>还有对真实事件改编的考究，举一个影片中例子：四个阀门，一个阀门需要8000转，一共需要32000转，而假设主角2秒完成一转，则需要64000秒，共20个小时，抛去另一名消防员转的1/4，还需要十几个小时，同时需要顶着高温作业。</p><p>中国的大部分影片只要涉及类似题材的，往往刻意着重突出英雄主义，从而在其艺术表现力、真实性等方面有所欠缺。我们只能停留在爱国主义，无私奉献精神的层面上，而不能上升到人道主义和整个人类的灵魂、这样的电影带给人的永远只是情绪上的激烈反应和感动后的空虚无物，视觉上的刺激代替了心灵的震撼。比如《战狼2》，原本他们可以拍的更好，可惜文戏拖了后腿。同样是主旋律电影，《我不是药神》这部片在我心中的地位就一直很高。中国不缺主旋律电影，缺的是优秀的剧本，中国能拍出《流浪地球》那样特效的电影，可见技术和特效都是不缺的，因此还是应该把精力花在思考怎么去讲一个好的故事，通过电影引起观众对人性、灾难、英雄气概的思考上。</p><p>因此，要问我如何评价这部电影，我的回答是，如果和《切尔诺贝利》这类写实的电影相比，它差了很多，过分追求观众情感共鸣，人物表现略微空洞，剧情演绎略微浮夸（原油着火用水扑，烈火中扔掉氧气面罩，徒手扳阀门）。但从国产电影的角度来看，《烈火英雄》是一部很好的励志片，唤起人们对消防员战士英勇无畏不惧死亡的歌颂，编剧和导演的对这部电影的定位也就在此。</p><p>顺便一提，和我一起看电影的两个妹子都觉得电影非常棒，甚至有一个从电影中期就一直热泪盈眶。可见《烈火英雄》的受众并不是我这一类人，而是需要这种电影产生的正能量激励的人，这也是这部电影评价两极分化严重的原因之一。而我，从来都不是一个通过电影这种艺术形式去获得生活动力的人，仅此而已吧。</p><p>回到开头的疑问，即使存在这样一个世界，我想，也是少数人的，建立在大多数人不幸的基础之上的“幸福”世界吧。在这个世界中有无数默默奉献的小人物，他们咬着牙，就算流血也要坚持。坚持什么？他们心中存在的正义。然而讽刺的是，他们坚持的正义却是无比虚无的东西，只会成为上层人民享受生活的源泉。在我看来，不过工具人罢了。</p><p>我自诩做不了战场效命的士兵，无法改变这个并不美好的世界。但我想做自己能想到的美好的事，如果让这个世界变得美好那么一点点，也足够了。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;//cdn.c1oudust.cn/20190805/TheBravest.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="电影" scheme="http://yoursite.com/source/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core + EF 报nuget包版本冲突错误</title>
    <link href="http://yoursite.com/blog/dotNETCoreEF%E6%8A%A5nuget%E5%8C%85%E4%B8%8D%E5%85%BC%E5%AE%B920190621/"/>
    <id>http://yoursite.com/blog/dotNETCoreEF报nuget包不兼容20190621/</id>
    <published>2019-06-20T16:00:00.000Z</published>
    <updated>2020-03-16T19:15:32.824Z</updated>
    
    <content type="html"><![CDATA[<p>错误信息如下：</p><p>错误<code>NU1107 Microsoft.EntityFrameworkCore</code> 中检测到版本冲突。直接安装/引用 <code>Microsoft.EntityFrameworkCore 2.2.4</code> 到项目 CoreWeb 可解决此问题。</p><a id="more"></a><p>NewsPublish -&gt; NewsPublish.Service -&gt; Microsoft.EntityFrameworkCore (&gt;= 2.2.4)<br>NewsPublish -&gt; Microsoft.AspNetCore.App 2.1.1 -&gt; Microsoft.EntityFrameworkCore (&gt;= 2.1.1 &amp;&amp; &lt; 2.2.0)</p><p>问题出现原因是：nuget 包版本不兼容</p><p>升级包，发现无法升级，然后查原因是.net Core 版本问题，</p><p>升级版本至 2.2，并在项目上添加目标框架为 2.2，问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误信息如下：&lt;/p&gt;
&lt;p&gt;错误&lt;code&gt;NU1107 Microsoft.EntityFrameworkCore&lt;/code&gt; 中检测到版本冲突。直接安装/引用 &lt;code&gt;Microsoft.EntityFrameworkCore 2.2.4&lt;/code&gt; 到项目 CoreWeb 可解决此问题。&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="http://yoursite.com/categories/NET/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/source/tags/C/"/>
    
      <category term=".NET" scheme="http://yoursite.com/source/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序报错:Page is not constructed because it is not found.</title>
    <link href="http://yoursite.com/blog/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99Page_is_not_constructed20190424/"/>
    <id>http://yoursite.com/blog/小程序报错Page_is_not_constructed20190424/</id>
    <published>2019-04-23T16:00:00.000Z</published>
    <updated>2021-01-10T17:36:05.324Z</updated>
    
    <content type="html"><![CDATA[<p>在实际开发中遇到了一个错误：Page is not constructed because it is not found</p><div align="center"><br><img src="//cdn.c1oudust.cn/WeChatmicroApp_error01.jpg" alt=""><br></div><p>该错误多发生在点击事件切换页面的时候<br>解决方法：<br>在需要切换到的那个页面的 js 文件中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Page(&#123; &#125;)</div></pre></td></tr></table></figure><blockquote><p><strong>Tips: 在 js 文件中输入 Page 回车，可自动添加 Page 方法，包括里面的 data 初始化数据及 onLoad 等生命中期方法。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际开发中遇到了一个错误：Page is not constructed because it is not found&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;//cdn.c1oudust.cn/WeChatmicroApp_erro
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/source/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序警告：Now you can provide attr &quot;wx:key&quot; for a &quot;wx:for&quot; to improve performance.</title>
    <link href="http://yoursite.com/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AD%A6%E5%91%8Awxkey20190421/"/>
    <id>http://yoursite.com/blog/微信小程序警告wxkey20190421/</id>
    <published>2019-04-20T16:00:00.000Z</published>
    <updated>2021-01-10T17:36:09.175Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">img{text-align: center; margin: 0 auto;}</style><p>在实际开发中遇到了一个警告：Now you can provide attr <code>wx:key</code> for a <code>wx:for</code> to improve performance.</p><p><img src="//cdn.c1oudust.cn/WeChatmicroApp_warning.jpg" alt="小程序报错"></p><a id="more"></a><p>官方文档解释如下：</p><blockquote><p><strong>wx:key</strong><br>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <code>&lt;input&gt;</code>中的输入内容，<code>&lt;switch&gt;</code> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。<br><code>wx:key</code> 的值以两种形式提供</p><ul><li>字符串，代表在 for 循环的 array 中 item 的某个 <code>property</code>，该 <code>property</code> 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li><li>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：<br>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。<br>如不提供 <code>wx:key</code>，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</li></ul></blockquote><p>简单来说，就是给 for 循环的每个项目添加一个唯一性标识符，以提升列表的渲染速度。<br>当一个列表是静态列表,比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;block wx:<span class="keyword">for</span>-items=<span class="string">"&#123;&#123;postList&#125;&#125;"</span> &gt;</div></pre></td></tr></table></figure><p>不添加<code>wx:key</code>则会出现<code>warning： Now you can provide attr &quot;wx:key&quot; for a &quot;wx:for&quot; to improve performance.</code></p><p>此时可以选择忽略。</p><p>如果想要去掉 warning，就要给 array 的 每一个 item 都添加一个唯一识别的 <code>property</code> 来管理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;block wx:<span class="keyword">for</span>-items=<span class="string">"&#123;&#123;postList&#125;&#125;"</span> wx:key=<span class="string">"index"</span>&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;

img{text-align: center; margin: 0 auto;}
&lt;/style&gt;

&lt;p&gt;在实际开发中遇到了一个警告：Now you can provide attr &lt;code&gt;wx:key&lt;/code&gt; for a &lt;code&gt;wx:for&lt;/code&gt; to improve performance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//cdn.c1oudust.cn/WeChatmicroApp_warning.jpg&quot; alt=&quot;小程序报错&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="微信小程序" scheme="http://yoursite.com/source/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows下使用SublimeText3调试运行Pascal程序</title>
    <link href="http://yoursite.com/blog/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8sublimetext3%E8%B0%83%E8%AF%95%E8%BF%90%E8%A1%8CPascal%E7%A8%8B%E5%BA%8F20190307/"/>
    <id>http://yoursite.com/blog/Windows下使用sublimetext3调试运行Pascal程序20190307/</id>
    <published>2019-03-06T16:00:00.000Z</published>
    <updated>2021-01-10T17:36:36.361Z</updated>
    
    <content type="html"><![CDATA[<ul><li>系统：Windows 10 64bit</li><li>软件：Sublime Text 3.1.1 Build3176</li><li>编译软件：Free Pascal<a id="more"></a></li></ul><blockquote><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2></blockquote><h3 id="下载并安装-Free-Pascal"><a href="#下载并安装-Free-Pascal" class="headerlink" title="下载并安装 Free Pascal"></a>下载并安装 Free Pascal</h3><p>下载地址：<a href="https://www.freepascal.org/down/i386/win32.html" target="_blank" rel="external">Download</a></p><p>安装最新的 3.0.4 版本。</p><p>我这里选择把安装目录设为 D 盘的 FPC 文件夹。</p><p>安装过程中安装器会自动帮我们添加好环境变量，为了保险起见，我们可以测试一下。打开 cmd 命令行，执行 fpc -v，若显示版本号，则说明安装成功，跳过下一步。若报错，则需要手动配置环境变量。</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>右击我的电脑，属性–&gt;高级–&gt;环境变量。</p><p>在系统环境变量 PATH 里添加 D:\FPC\3.0.4\bin\i386-win32 （如果里面还有其他的变量，记得添加英文分号;）</p><p>以上环境变量中的具体路径请根据本人实际的 i386-win32 文件夹 路径进行设置，默认地址在 C 盘。</p><blockquote><h2 id="配置-sublime-text-编译系统"><a href="#配置-sublime-text-编译系统" class="headerlink" title="配置 sublime text 编译系统"></a>配置 sublime text 编译系统</h2></blockquote><p>需要的编译器到手了，现在我们来配置一下编辑器 Sublime Text3 的编译系统。<br>以管理员身份运行 Sublime Text 3,进入菜单 工具-&gt;编译系统-&gt;新编译系统。</p><p><div align="center"><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_01.jpg" alt=""></div></p><div align="left"><p>输入如下内容</p><p><div align="center"><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_02.jpg" alt=""></div></p><div align="left"><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"cmd"</span>: [<span class="string">"D:/FPC/3.0.4/bin/i386-win32/ppc386.exe"</span>, <span class="string">"$file"</span>],</div><div class="line">  <span class="attr">"file_regex"</span>: <span class="string">"^(?:pas:)?[\t ](...*?):([0-9]*):?([0-9]*)"</span>,</div><div class="line">  <span class="attr">"selector"</span>: <span class="string">"source.pas"</span>,</div><div class="line"></div><div class="line">  <span class="attr">"variants"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Run"</span>,</div><div class="line">      <span class="attr">"shell_cmd"</span>: <span class="string">"start cmd /c \"\"$&#123;file_path&#125;/$&#123;file_base_name&#125;\" &amp; pause\""</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>把 cmd 后的路径改成你自己 ppc386.exed 的路径,将文件命名为 Pascal.sublime-build 保存至 C 盘 Users\用户名\AppData\Roaming\Sublime Text 3\Packages\User 目录下（默认就是这个）</p><p><div align="center"><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_03.jpg" alt=""></div></p><div align="left"><blockquote><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2></blockquote><ol><li><p>完成之后，在 Sublime 中 Tools（工具）-&gt;bulid system（编译系统）中会出现一个 Pascal 的编译方式。选择后就可以使用了。</p><p><div align="center"><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_04.jpg" alt=""></div></p><div align="left"></div></li><li><p>按下快捷键 Ctrl+B 选择 Pascal，回车即可对当前 Pascal 程序进行编译。</p><p> <div align="center"><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_05.jpg" alt=""><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_06.jpg" alt=""></div></p><div align="left"></div></li><li><p>Shift+Ctrl+P 召唤出搜索框，输入 Pascal</p><p> <div align="center"><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_07.jpg" alt=""></div></p><div align="left"></div></li><li><p>选择 Pascal-Run，即可在 cmd 中运行编译后的结果。</p><p> <div align="center"><br><img src="//cdn.c1oudust.cn/ST3buildPascal/pascal_08.jpg" alt=""></div></p><div align="left"></div></li></ol><blockquote><h2 id="中文乱码解决"><a href="#中文乱码解决" class="headerlink" title="中文乱码解决"></a>中文乱码解决</h2></blockquote><ol><li>Shift+Ctrl+P 召唤出搜索框；</li><li>install package （需要安装好 package control）；</li><li>搜索安装 ConvertToUTF8 和 supportGBK；</li><li>在 New File 新建 pas 代码文件之后，直接按住快捷键 Ctrl+Shift+C 设置文本的 Encoding 为 GBK 就能解决了。</li></ol></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;系统：Windows 10 64bit&lt;/li&gt;
&lt;li&gt;软件：Sublime Text 3.1.1 Build3176&lt;/li&gt;
&lt;li&gt;编译软件：Free Pascal
    
    </summary>
    
      <category term="Pascal" scheme="http://yoursite.com/categories/Pascal/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/source/tags/Windows/"/>
    
      <category term="Pascal" scheme="http://yoursite.com/source/tags/Pascal/"/>
    
  </entry>
  
  <entry>
    <title>对你来说活着意味着什么？</title>
    <link href="http://yoursite.com/blog/%E5%AF%B9%E4%BD%A0%E6%9D%A5%E8%AF%B4%E6%B4%BB%E7%9D%80%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%8820190119/"/>
    <id>http://yoursite.com/blog/对你来说活着意味着什么20190119/</id>
    <published>2019-01-18T16:00:00.000Z</published>
    <updated>2021-01-10T17:36:23.015Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css">img{text-align: center; margin: 0 auto;}</style><p>小说是从 P 站上一位画师那知道的，自然被这个名字所吸引。联想到少年与少女站在樱花树下的插图和带有一丝悬疑色彩的名字，不由地想：“究竟是怎样一个故事呢？”直到看完了小说，电影，和最近上映的动漫电影。</p><p><img src="//cdn.c1oudust.cn/50960701.jpg" alt="头图"></p><a id="more"></a><iframe frameborder="no" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1305366565&auto=1&height=66"></iframe><p>电影是用插叙和倒叙来展开剧情。中年的志贺春树在母校做了老师，教导主任想起志贺学生时代是旧图书馆的图书管理员，于是便把整理旧书搬到校临时图书馆的责任就交到了志贺手上。</p><p>志贺走进阔别了多年的图书馆，恍惚中仿佛看到当年那个满脸笑容的少女从他面前一晃而过。于是时光倒流，镜头转向少年与少女相遇的那一刻，故事开始了。</p><p>而动漫采用与原作相同的开头——“同学山内樱良的告别式，是在一个和她性格完全不相称的雨天举行的”。之后志贺回忆起和樱良之间的种种，被“我”以笔触记录了下来。</p><p>本来虐心剧情我是比较逃避看多次的，不过这部影片，重点不在虐心。我从中感受到的是两个迥异的性格，因为某种催化剂产生反应，最后对彼此都带来了改变。他们在一个季节里相识，相知，分别的过程，就好像樱花的绽放与凋零，短暂而又绚烂。</p><p><img src="//cdn.c1oudust.cn/suizou4.jpg" alt=""></p><p>“我听说啊，樱花会假装凋谢然后再次盛放的。假装已经凋零了，其实它们会马上长出新芽，然后沉睡起来，根本没有凋零这回事。只是为了吓吓大家藏起来罢了。然后到了温暖的季节，就再一口气长出花朵来，给大家一个惊喜。”少女如是说到。</p><p>面对死亡，樱良总是摆出满不在乎的令人心疼的笑容，随后独自一人时，却又不争气的流下眼泪。</p><p>我们存活于世，总会把那个真实的自我小心翼翼地隐藏起来，反而当知道自己不久于世时，也许会活的更洒脱一点吧。但人就是这样，越坚强的人，一旦受伤，就会变得愈加脆弱，于是继续掩饰，伤口却难以隐藏。</p><p>唯一的一次，是在酒店玩真心话大冒险的最后一局。在酒精的作用下，少女终于坦露出脆弱的内心：</p><p><img src="//cdn.c1oudust.cn/suizou1.jpg" alt=""></p><p>志贺想起打开少女背包时看到的满满的药片，说：我选大冒险。<br>一直假装坚强的她遇到了那个与自己心意相通的人，从此不用将真心掩藏起来，因为终于有了一个能够呵护爱惜自己真心的人，这是一件很幸福的事情吧。然而就是这样的幸福氛围，越能体现出悲剧的色彩。</p><p>活着，对你来说意味着什么？</p><p>“活着就是和某个人心意相通吧，欣赏某个人，喜欢上他，讨厌他，和某个人在一起，手牵着手，相互拥抱，相互错过。”</p><p><img src="//cdn.c1oudust.cn/suizou2.jpg" alt=""></p><p>春树和樱良之间，并不是简单的友情或爱情，而是在那之上的更加纯粹的关系。心意相通也好，为对方做出改变也好，“这些都不是偶然，也不是命运的安排，而是你做出的选择和我做出的选择，让我们遇见了彼此。我们是靠自己的意愿相遇的”。</p><p>村上春树曾经写到：死不是生的对立面，而是作为生的一部分永恒。<br>作者给樱良安排的结局并不是传统爱情故事那样圆满的结局，甚至连因病而死都无法做到，而是很突然地在见男主的路途中遇害了。虽然之前就有了伏笔，不过看到这里还是不免感到揪心。不过想到了这句话，感觉打破这种浪漫氛围其实也让春树被救赎的剧情得到了升华 。</p><p>樱良活着的时候，她的温暖和阳光融化了春树的自我封闭；樱良死后，她的灵魂会活在在春树心中，她的“死”将作为春树“生”的一部分永恒。所以樱良的生用什么方式结束也不再那么值得去争议，因为从那个时刻起，无论樱良用什么方式死去，她的“生”都会注定在春树身上续存。</p><p><img src="//cdn.c1oudust.cn/suizou3.jpg" alt=""></p><blockquote><p>“为什么你就是不喊我的名字呢？<br>因为春树，你一次都没喊过我的名字对吧。<br>从认识到最后都是“你”“你”“你”的叫我，很过分耶。<br>可是啊，你偷偷跑进医院那次，我才终于明白了，你总有一天会失去我，但我不想做你的朋友或是恋人，不想做你心中那个特别的人。不过，我憧憬着这样的你，憧憬着那个和谁都不牵扯，自己独立生活，那么坚强的你。<br>因为我很脆弱，会让朋友和家人被我的悲伤影响，但春树，你一直都能保持自我。你真的很厉害，所以也请把这些勇气，分一点给大家吧，然后去喜欢上某个人，牵起对方的手，拥抱对方，即便心情郁闷，哪怕犹豫不决，也要和很多人交流沟通，连我的份一起。嗯，活下去。<br>我啊，想变成像春树那样的人，想活在你身体里，不行，不能说这些陈腔滥调的话啊。对了，可能你会不喜欢，我果然…”</p></blockquote><p><img src="//cdn.c1oudust.cn/suizoumain.jpg" alt=""></p><p>在电影的结尾，春树泪流满面的拿着樱良留给恭子的信去往她的婚礼现场，并说出了在樱良面前练习多次的那句话“可以做我的朋友吗”。动漫的结局则是悲剧之中多了一点浪漫，春树和恭子成为了朋友，并且一起给樱良扫墓后，相约前去樱良家。少年因为少女做出了改变，欢声笑语中，樱花飞舞，触动人心，温暖人心。</p><p>怀抱美好感情的人，只能写出拙劣的文字。庆幸看到它，感受它，思考它。有一个心意相通的人真的很美好呢，就像吃掉你的胰脏，就能活在你身体里一样。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
img{text-align: center; margin: 0 auto;}
&lt;/style&gt;

&lt;p&gt;小说是从 P 站上一位画师那知道的，自然被这个名字所吸引。联想到少年与少女站在樱花树下的插图和带有一丝悬疑色彩的名字，不由地想：“究竟是怎样一个故事呢？”直到看完了小说，电影，和最近上映的动漫电影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//cdn.c1oudust.cn/50960701.jpg&quot; alt=&quot;头图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="电影" scheme="http://yoursite.com/source/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="动漫" scheme="http://yoursite.com/source/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
</feed>
